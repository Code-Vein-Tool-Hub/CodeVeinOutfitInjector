<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UAssetAPI</name>
    </assembly>
    <members>
        <member name="T:UAssetAPI.CustomVersion">
            <summary>
            A custom version. Controls more specific serialization than the main engine object version does.
            </summary>
        </member>
        <member name="F:UAssetAPI.CustomVersion.GuidToCustomVersionStringMap">
            <summary>
            Static map of custom version GUIDs to the object or enum that they represent in the Unreal Engine. This list is not necessarily exhaustive, so feel free to add to it if need be.
            </summary>
        </member>
        <member name="F:UAssetAPI.CustomVersion.UnusedCustomVersionKey">
            <summary>
            A GUID that represents an unused custom version.
            </summary>
        </member>
        <member name="M:UAssetAPI.CustomVersion.GetCustomVersionFriendlyNameFromGuid(System.Guid)">
            <summary>
            Returns the name of the object or enum that a custom version GUID represents, as specified in <see cref="F:UAssetAPI.CustomVersion.GuidToCustomVersionStringMap"/>.
            </summary>
            <param name="guid">A GUID that represents a custom version.</param>
            <returns>A string that represents the friendly name of the corresponding custom version.</returns>
        </member>
        <member name="M:UAssetAPI.CustomVersion.GetCustomVersionGuidFromFriendlyName(System.String)">
            <summary>
            Returns the GUID of the custom version that the object or enum name provided represents.
            </summary>
            <param name="friendlyName">The name of a custom version object or enum.</param>
            <returns>A GUID that represents the custom version</returns>
        </member>
        <member name="M:UAssetAPI.CustomVersion.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UAssetAPI.CustomVersion"/> class given an object or enum name and a version number.
            </summary>
            <param name="friendlyName">The friendly name to use when initializing this custom version.</param>
            <param name="version">The version number to use when initializing this custom version.</param>
        </member>
        <member name="M:UAssetAPI.CustomVersion.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UAssetAPI.CustomVersion"/> class given a custom version GUID and a version number.
            </summary>
            <param name="key">The GUID to use when initializing this custom version.</param>
            <param name="version">The version number to use when initializing this custom version.</param>
        </member>
        <member name="M:UAssetAPI.CustomVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UAssetAPI.CustomVersion"/> class.
            </summary>
        </member>
        <member name="T:UAssetAPI.IntroducedAttribute">
            <summary>
            Represents the engine version at the time that a custom version was implemented.
            </summary>
        </member>
        <member name="T:UAssetAPI.FFortniteMainBranchObjectVersion">
            <summary>
            Custom serialization version for changes made in the //Fortnite/Main stream.
            </summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.BeforeCustomVersionWasAdded">
            <summary>Before any version changes were made</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.WorldCompositionTile3DOffset">
            <summary>World composition tile offset changed from 2d to 3d</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.MaterialInstanceSerializeOptimization_ShaderFName">
            <summary>Minor material serialization optimization</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.CullDistanceRefactor_RemovedDefaultDistance">
            <summary>Refactored cull distances to account for HLOD, explicit override and globals in priority</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.SaveGeneratedMorphTargetByEngine">
            <summary>Support to remove morphtarget generated by bRemapMorphtarget</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.ConvertReductionSettingOptions">
            <summary>Convert reduction setting options</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.StaticParameterTerrainLayerWeightBlendType">
            <summary>Serialize the type of blending used for landscape layer weight static params</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FixUpNoneNameAnimationCurves">
            <summary>Fix up None Named animation curve names,</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.EnsureActiveBoneIndicesToContainParents">
            <summary>Ensure ActiveBoneIndices to have parents even not skinned for old assets</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.SerializeInstancedStaticMeshRenderData">
            <summary>Serialize the instanced static mesh render data, to avoid building it at runtime</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.CachedMaterialQualityNodeUsage">
            <summary>Cache material quality node usage</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FontOutlineDropShadowFixup">
            <summary>Font outlines no longer apply to drop shadows for new objects but we maintain the opposite way for backwards compat</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.NewSkeletalMeshImporterWorkflow">
            <summary>New skeletal mesh import workflow (Geometry only or animation only re-import )</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.NewLandscapeMaterialPerLOD">
            <summary>Migrate data from previous data structure to new one to support materials per LOD on the Landscape</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.RemoveUnnecessaryTracksFromPose">
            <summary>New Pose Asset data type</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FoliageLazyObjPtrToSoftObjPtr">
            <summary>Migrate Foliage TLazyObjectPtr to TSoftObjectPtr</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.REVERTED_StoreTimelineNamesInTemplate">
            <summary>TimelineTemplates store their derived names instead of dynamically generating. This code tied to this version was reverted and redone at a later date</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.AddBakePoseOverrideForSkeletalMeshReductionSetting">
            <summary>Added BakePoseOverride for LOD setting</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.StoreTimelineNamesInTemplate">
            <summary>TimelineTemplates store their derived names instead of dynamically generating</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.WidgetStopDuplicatingAnimations">
            <summary>New Pose Asset data type</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.AllowSkeletalMeshToReduceTheBaseLOD">
            <summary>Allow reducing of the base LOD, we need to store some imported model data so we can reduce again from the same data.</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.ShrinkCurveTableSize">
            <summary>Curve Table size reduction</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.WidgetAnimationDefaultToSelfFail">
            <summary>Widgets upgraded with WidgetStopDuplicatingAnimations, may not correctly default-to-self for the widget parameter.</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FortHUDElementNowRequiresTag">
            <summary>HUDWidgets now require an element tag</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FortMappedCookedAnimation">
            <summary>Animation saved as bulk data when cooked</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.SupportVirtualBoneInRetargeting">
            <summary>Support Virtual Bone in Retarget Manager</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FixUpWaterMetadata">
            <summary>Fixup bad defaults in water metadata</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.MoveWaterMetadataToActor">
            <summary>Move the location of water metadata</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.ReplaceLakeCollision">
            <summary>Replaced lake collision component</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.AnimLayerGuidConformation">
            <summary>Anim layer node names are now conformed by Guid</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.MakeOceanCollisionTransient">
            <summary>Ocean collision component has become dynamic</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FFieldPathOwnerSerialization">
            <summary>FFieldPath will serialize the owner struct reference and only a short path to its property</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FixUpUnderwaterPostProcessMaterial">
            <summary>Simplified WaterBody post process material handling</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.SupportMultipleWaterBodiesPerExclusionVolume">
            <summary>A single water exclusion volume can now exclude N water bodies</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.RigVMByteCodeDeterminism">
            <summary>Serialize rigvm operators one by one instead of the full byte code array to ensure determinism</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.LandscapePhysicalMaterialRenderData">
            <summary>Serialize the physical materials generated by the render material</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FixupRuntimeVirtualTextureVolume">
            <summary>RuntimeVirtualTextureVolume fix transforms</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FixUpRiverCollisionComponents">
            <summary>Retrieve water body collision components that were lost in cooked builds</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.FixDuplicateRiverSplineMeshCollisionComponents">
            <summary>Fix duplicate spline mesh components on rivers</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.ContainsStableActorGUIDs">
            <summary>Indicates level has stable actor guids</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.LevelsetSerializationSupportForBodySetup">
            <summary>Levelset Serialization support for BodySetup.</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.ChaosSolverPropertiesMoved">
            <summary>Moving Chaos solver properties to allow them to exist in the project physics settings</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.GameFeatureData_MovedComponentListAndCheats">
            <summary>Moving some UFortGameFeatureData properties and behaviors into the UGameFeatureAction pattern</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.ChaosClothAddfictitiousforces">
            <summary>Add centrifugal forces for cloth</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.ChaosConvexVariableStructureDataAndVerticesArray">
            <summary>Chaos Convex StructureData supports different index sizes based on num verts/planes. Chaos FConvex uses array of FVec3s for vertices instead of particles (Merged from //UE4/Main)</summary>
        </member>
        <member name="F:UAssetAPI.FFortniteMainBranchObjectVersion.RemoveLandscapeWaterInfo">
            <summary>Remove the WaterVelocityHeightTexture dependency on MPC_Landscape and LandscapeWaterIndo</summary>
        </member>
        <member name="T:UAssetAPI.FFrameworkObjectVersion">
            <summary>
            Custom serialization version for changes made in Dev-Framework stream.
            </summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.BeforeCustomVersionWasAdded">
            <summary>Before any version changes were made</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.UseBodySetupCollisionProfile">
            <summary>BodySetup's default instance collision profile is used by default when creating a new instance.</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.AnimBlueprintSubgraphFix">
            <summary>Regenerate subgraph arrays correctly in animation blueprints to remove duplicates and add missing graphs that appear read only when edited</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.MeshSocketScaleUtilization">
            <summary>Static and skeletal mesh sockets now use the specified scale</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.ExplicitAttachmentRules">
            <summary>Attachment rules are now explicit in how they affect location, rotation and scale</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.MoveCompressedAnimDataToTheDDC">
            <summary>Moved compressed anim data from uasset to the DDC</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.FixNonTransactionalPins">
            <summary>Some graph pins created using legacy code seem to have lost the RF_Transactional flag, which causes issues with undo. Restore the flag at this version</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.SmartNameRefactor">
            <summary>Create new struct for SmartName, and use that for CurveName</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.AddSourceReferenceSkeletonToRig">
            <summary>Add Reference Skeleton to Rig</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.ConstraintInstanceBehaviorParameters">
            <summary>Refactor ConstraintInstance so that we have an easy way to swap behavior paramters</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.PoseAssetSupportPerBoneMask">
            <summary>Pose Asset support mask per bone</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.PhysAssetUseSkeletalBodySetup">
            <summary>Physics Assets now use SkeletalBodySetup instead of BodySetup</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.RemoveSoundWaveCompressionName">
            <summary>Remove SoundWave CompressionName</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.AddInternalClothingGraphicalSkinning">
            <summary>Switched render data for clothing over to unreal data, reskinned to the simulation mesh</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.WheelOffsetIsFromWheel">
            <summary>Wheel force offset is now applied at the wheel instead of vehicle COM</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.MoveCurveTypesToSkeleton">
            <summary>Move curve metadata to be saved in skeleton. Individual asset still saves some flag - i.e. disabled curve and editable or not, but major flag - i.e. material types - moves to skeleton and handle in one place</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.CacheDestructibleOverlaps">
            <summary>Cache destructible overlaps on save</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.GeometryCacheMissingMaterials">
            <summary>Added serialization of materials applied to geometry cache objects</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.LODsUseResolutionIndependentScreenSize">
            <summary>Switch static and skeletal meshes to calculate LODs based on resolution-independent screen size</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.BlendSpacePostLoadSnapToGrid">
            <summary>Blend space post load verification</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.SupportBlendSpaceRateScale">
            <summary>Addition of rate scales to blend space samples</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.LODHysteresisUseResolutionIndependentScreenSize">
            <summary>LOD hysteresis also needs conversion from the LODsUseResolutionIndependentScreenSize version</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.ChangeAudioComponentOverrideSubtitlePriorityDefault">
            <summary>AudioComponent override subtitle priority default change</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.HardSoundReferences">
            <summary>Serialize hard references to sound files when possible</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.EnforceConstInAnimBlueprintFunctionGraphs">
            <summary>Enforce const correctness in Animation Blueprint function graphs</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.InputKeySelectorTextStyle">
            <summary>Upgrade the InputKeySelector to use a text style</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.EdGraphPinContainerType">
            <summary>Represent a pins container type as an enum not 3 independent booleans</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.ChangeAssetPinsToString">
            <summary>Switch asset pins to store as string instead of hard object reference</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.LocalVariablesBlueprintVisible">
            <summary>Fix Local Variables so that the properties are correctly flagged as blueprint visible</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.RemoveUField_Next">
            <summary>Stopped serializing UField_Next so that UFunctions could be serialized in dependently of a UClass in order to allow us to do all UFunction loading in a single pass (after classes and CDOs are created)</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.UserDefinedStructsBlueprintVisible">
            <summary>Fix User Defined structs so that all members are correct flagged blueprint visible</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.PinsStoreFName">
            <summary>FMaterialInput and FEdGraphPin store their name as FName instead of FString</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.UserDefinedStructsStoreDefaultInstance">
            <summary>User defined structs store their default instance, which is used for initializing instances</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.FunctionTerminatorNodesUseMemberReference">
            <summary>Function terminator nodes serialize an FMemberReference rather than a name/class pair</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.EditableEventsUseConstRefParameters">
            <summary>Custom event and non-native interface event implementations add 'const' to reference parameters</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.BlueprintGeneratedClassIsAlwaysAuthoritative">
            <summary>No longer serialize the legacy flag that indicates this state, as it is now implied since we don't serialize the skeleton CDO</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.EnforceBlueprintFunctionVisibility">
            <summary>Enforce visibility of blueprint functions - e.g. raise an error if calling a private function from another blueprint:</summary>
        </member>
        <member name="F:UAssetAPI.FFrameworkObjectVersion.StoringUCSSerializationIndex">
            <summary>ActorComponents now store their serialization index</summary>
        </member>
        <member name="T:UAssetAPI.FCoreObjectVersion">
            <summary>
            Custom serialization version for changes made in Dev-Core stream.
            </summary>
        </member>
        <member name="F:UAssetAPI.FCoreObjectVersion.BeforeCustomVersionWasAdded">
            <summary>Before any version changes were made</summary>
        </member>
        <member name="T:UAssetAPI.FEditorObjectVersion">
            <summary>
            Custom serialization version for changes made in Dev-Editor stream.
            </summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.BeforeCustomVersionWasAdded">
            <summary>Before any version changes were made</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.GatheredTextProcessVersionFlagging">
            <summary>Localizable text gathered and stored in packages is now flagged with a localizable text gathering process version</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.GatheredTextPackageCacheFixesV1">
            <summary>Fixed several issues with the gathered text cache stored in package headers</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.RootMetaDataSupport">
            <summary>Added support for "root" meta-data (meta-data not associated with a particular object in a package)</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.GatheredTextPackageCacheFixesV2">
            <summary>Fixed issues with how Blueprint bytecode was cached</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.TextFormatArgumentDataIsVariant">
            <summary>Updated FFormatArgumentData to allow variant data to be marshaled from a BP into C++</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.SplineComponentCurvesInStruct">
            <summary>Changes to SplineComponent</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.ComboBoxControllerSupportUpdate">
            <summary>Updated ComboBox to support toggling the menu open, better controller support</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.RefactorMeshEditorMaterials">
            <summary>Refactor mesh editor materials</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.AddedFontFaceAssets">
            <summary>Added UFontFace assets</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.UPropertryForMeshSection">
            <summary>Add UPROPERTY for TMap of Mesh section, so the serialize will be done normally (and export to text will work correctly)</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.WidgetGraphSchema">
            <summary>Update the schema of all widget blueprints to use the WidgetGraphSchema</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.AddedBackgroundBlurContentSlot">
            <summary>Added a specialized content slot to the background blur widget</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.StableUserDefinedEnumDisplayNames">
            <summary>Updated UserDefinedEnums to have stable keyed display names</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.AddedInlineFontFaceAssets">
            <summary>Added "Inline" option to UFontFace assets</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.UPropertryForMeshSectionSerialize">
            <summary>Fix a serialization issue with static mesh FMeshSectionInfoMap FProperty</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.FastWidgetTemplates">
            <summary>Adding a version bump for the new fast widget construction in case of problems.</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.MaterialThumbnailRenderingChanges">
            <summary>Update material thumbnails to be more intelligent on default primitive shape for certain material types</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.NewSlateClippingSystem">
            <summary>Introducing a new clipping system for Slate/UMG</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.MovieSceneMetaDataSerialization">
            <summary>MovieScene Meta Data added as native Serialization</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.GatheredTextEditorOnlyPackageLocId">
            <summary>Text gathered from properties now adds two variants: a version without the package localization ID (for use at runtime), and a version with it (which is editor-only)</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.AddedAlwaysSignNumberFormattingOption">
            <summary>Added AlwaysSign to FNumberFormattingOptions</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.AddedMaterialSharedInputs">
            <summary>Added additional objects that must be serialized as part of this new material feature</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.AddedMorphTargetSectionIndices">
            <summary>Added morph target section indices</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.SerializeInstancedStaticMeshRenderData">
            <summary>Serialize the instanced static mesh render data, to avoid building it at runtime</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.MeshDescriptionNewSerialization_MovedToRelease">
            <summary>Change to MeshDescription serialization (moved to release)</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.MeshDescriptionNewAttributeFormat">
            <summary>New format for mesh description attributes</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.ChangeSceneCaptureRootComponent">
            <summary>Switch root component of SceneCapture actors from MeshComponent to SceneComponent</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.StaticMeshDeprecatedRawMesh">
            <summary>StaticMesh serializes MeshDescription instead of RawMesh</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.MeshDescriptionBulkDataGuid">
            <summary>MeshDescriptionBulkData contains a Guid used as a DDC key</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.MeshDescriptionRemovedHoles">
            <summary>Change to MeshDescription serialization (removed FMeshPolygon::HoleContours)</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.ChangedWidgetComponentWindowVisibilityDefault">
            <summary>Change to the WidgetCompoent WindowVisibilty default value</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.CultureInvariantTextSerializationKeyStability">
            <summary>Avoid keying culture invariant display strings during serialization to avoid non-deterministic cooking issues</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.ScrollBarThicknessChange">
            <summary>Change to UScrollBar and UScrollBox thickness property (removed implicit padding of 2, so thickness value must be incremented by 4).</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.RemoveLandscapeHoleMaterial">
            <summary>Deprecated LandscapeHoleMaterial</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.MeshDescriptionTriangles">
            <summary>MeshDescription defined by triangles instead of arbitrary polygons</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.ComputeWeightedNormals">
            <summary>Add weighted area and angle when computing the normals</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.SkeletalMeshBuildRefactor">
            <summary>SkeletalMesh now can be rebuild in editor, no more need to re-import</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.SkeletalMeshMoveEditorSourceDataToPrivateAsset">
            <summary>Move all SkeletalMesh source data into a private uasset in the same package has the skeletalmesh</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.NumberParsingOptionsNumberLimitsAndClamping">
            <summary>Parse text only if the number is inside the limits of its type</summary>
        </member>
        <member name="F:UAssetAPI.FEditorObjectVersion.SkeletalMeshSourceDataSupport16bitOfMaterialNumber">
            <summary>Make sure we can have more then 255 material in the skeletal mesh source data</summary>
        </member>
        <member name="T:UAssetAPI.FAnimPhysObjectVersion">
            <summary>
            Custom serialization version for changes made in Dev-AnimPhys stream
            </summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.BeforeCustomVersionWasAdded">
            <summary>Before any version changes were made</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.ConvertAnimNodeLookAtAxis">
            <summary>convert animnode look at to use just default axis instead of enum, which doesn't do much</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.BoxSphylElemsUseRotators">
            <summary>Change FKSphylElem and FKBoxElem to use Rotators not Quats for easier editing</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.ThumbnailSceneInfoAndAssetImportDataAreTransactional">
            <summary>Change thumbnail scene info and asset import data to be transactional</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.AddedClothingMaskWorkflow">
            <summary>Enabled clothing masks rather than painting parameters directly</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.RemoveUIDFromSmartNameSerialize">
            <summary>Remove UID from smart name serialize, it just breaks determinism</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.CreateTargetReference">
            <summary>Convert FName Socket to FSocketReference and added TargetReference that support bone and socket</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.TuneSoftLimitStiffnessAndDamping">
            <summary>Tune soft limit stiffness and damping coefficients</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.FixInvalidClothParticleMasses">
            <summary>Fix possible inf/nans in clothing particle masses</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.CacheClothMeshInfluences">
            <summary>Moved influence count to cached data</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.SmartNameRefactorForDeterministicCooking">
            <summary>Remove GUID from Smart Names entirely + remove automatic name fixup</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.RenameDisableAnimCurvesToAllowAnimCurveEvaluation">
            <summary>rename the variable and allow individual curves to be set</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.AddLODToCurveMetaData">
            <summary>link curve to LOD, so curve metadata has to include LODIndex</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.FixupBadBlendProfileReferences">
            <summary>Fixed blend profile references persisting after paste when they aren't compatible</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.AllowMultipleAudioPluginSettings">
            <summary>Allowing multiple audio plugin settings</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.ChangeRetargetSourceReferenceToSoftObjectPtr">
            <summary>Change RetargetSource reference to SoftObjectPtr</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.SaveEditorOnlyFullPoseForPoseAsset">
            <summary>Save editor only full pose for pose asset</summary>
        </member>
        <member name="F:UAssetAPI.FAnimPhysObjectVersion.GeometryCacheAssetDeprecation">
            <summary>Asset change and cleanup to facilitate new streaming system</summary>
        </member>
        <member name="T:UAssetAPI.FReleaseObjectVersion">
            <summary>
            Custom serialization version for changes made in Release streams.
            </summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.BeforeCustomVersionWasAdded">
            <summary>Before any version changes were made</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.StaticMeshExtendedBoundsFix">
            <summary>Static Mesh extended bounds radius fix</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.NoSyncAsyncPhysAsset">
            <summary>Physics asset bodies are either in the sync scene or the async scene, but not both</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.LevelTransArrayConvertedToTArray">
            <summary>ULevel was using TTransArray incorrectly (serializing the entire array in addition to individual mutations). converted to a TArray</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.AddComponentNodeTemplateUniqueNames">
            <summary>Add Component node templates now use their own unique naming scheme to ensure more reliable archetype lookups.</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.UPropertryForMeshSectionSerialize">
            <summary>Fix a serialization issue with static mesh FMeshSectionInfoMap FProperty</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.ConvertHLODScreenSize">
            <summary>Existing HLOD settings screen size to screen area conversion</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.SpeedTreeBillboardSectionInfoFixup">
            <summary>Adding mesh section info data for existing billboard LOD models</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.EventSectionParameterStringAssetRef">
            <summary>Change FMovieSceneEventParameters::StructType to be a string asset reference from a TWeakObjectPtr UScriptStruct</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.SkyLightRemoveMobileIrradianceMap">
            <summary>Remove serialized irradiance map data from skylight.</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.RenameNoTwistToAllowTwistInTwoBoneIK">
            <summary>rename bNoTwist to bAllowTwist</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.MaterialLayersParameterSerializationRefactor">
            <summary>Material layers serialization refactor</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.AddSkeletalMeshSectionDisable">
            <summary>Added disable flag to skeletal mesh data</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.RemovedMaterialSharedInputCollection">
            <summary>Removed objects that were serialized as part of this material feature</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.HISMCClusterTreeMigration">
            <summary>HISMC Cluster Tree migration to add new data</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.PinDefaultValuesVerified">
            <summary>Default values on pins in blueprints could be saved incoherently</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.FixBrokenStateMachineReferencesInTransitionGetters">
            <summary>During copy and paste transition getters could end up with broken state machine references</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.MeshDescriptionNewSerialization">
            <summary>Change to MeshDescription serialization</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.UnclampRGBColorCurves">
            <summary>Change to not clamp RGB values > 1 on linear color curves</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.LinkTimeAnimBlueprintRootDiscoveryBugFix">
            <summary>Bugfix for FAnimObjectVersion::LinkTimeAnimBlueprintRootDiscovery.</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.TrailNodeBlendVariableNameChange">
            <summary>Change trail anim node variable deprecation</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.PropertiesSerializeRepCondition">
            <summary>Make sure the Blueprint Replicated Property Conditions are actually serialized properly.</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.FocalDistanceDisablesDOF">
            <summary>DepthOfFieldFocalDistance at 0 now disables DOF instead of DepthOfFieldFstop at 0.</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.Unused_SoundClass2DReverbSend">
            <summary>Removed versioning, but version entry must still exist to keep assets saved with this version loadable</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.GroomAssetVersion1">
            <summary>Groom asset version</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.GroomAssetVersion2">
            <summary>Groom asset version</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.SerializeAnimModifierState">
            <summary>Store applied version of Animation Modifier to use when reverting</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.GroomAssetVersion3">
            <summary>Groom asset version</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.DeprecateFilmbackSettings">
            <summary>Upgrade filmback</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.CustomImplicitCollisionType">
            <summary>custom collision type</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.FFieldPathOwnerSerialization">
            <summary>FFieldPath will serialize the owner struct reference and only a short path to its property</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.ReleaseObjectVersionFixup">
            <summary>Dummy version to allow us to fix up the fact that ReleaseObjectVersion was changed elsewhere</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.PinTypeIncludesUObjectWrapperFlag">
            <summary>Pin types include a flag that propagates the 'CPF_UObjectWrapper' flag to generated properties</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.WeightFMeshToMeshVertData">
            <summary>Added Weight member to FMeshToMeshVertData</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.AnimationGraphNodeBindingsDisplayedAsPins">
            <summary>Animation graph node bindings displayed as pins</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.SerializeRigVMOffsetSegmentPaths">
            <summary>Serialized rigvm offset segment paths</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.AbcVelocitiesSupport">
            <summary>Upgrade AbcGeomCacheImportSettings for velocities</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.MarginAddedToConvexAndBox">
            <summary>Add margin support to Chaos Convex</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.StructureDataAddedToConvex">
            <summary>Add structure data to Chaos Convex</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.AddedFrontRightUpAxesToLiveLinkPreProcessor">
            <summary>Changed axis UI for LiveLink AxisSwitch Pre Processor</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.FixupCopiedEventSections">
            <summary>Some sequencer event sections that were copy-pasted left broken links to the director BP</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.RemoteControlSerializeFunctionArgumentsSize">
            <summary>Serialize the number of bytes written when serializing function arguments</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.AddedSubSequenceEntryWarpCounter">
            <summary>Add loop counters to sequencer's compiled sub-sequence data</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.LonglatTextureCubeDefaultMaxResolution">
            <summary>Remove default resolution limit of 512 pixels for cubemaps generated from long-lat sources</summary>
        </member>
        <member name="F:UAssetAPI.FReleaseObjectVersion.GeometryCollectionCacheRemovesMassToLocal">
            <summary>bake center of mass into chaos cache</summary>
        </member>
        <member name="T:UAssetAPI.SerializedInterfaceReference">
            <summary>
            Represents an interface that a UClass (<see cref="T:UAssetAPI.ClassExport"/>) implements.
            </summary>
        </member>
        <member name="T:UAssetAPI.ClassExport">
            <summary>
            Represents an object class.
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.FuncMap">
            <summary>
            Map of all functions by name contained in this class
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.ClassFlags">
            <summary>
            Class flags; See <see cref="T:UAssetAPI.EClassFlags"/> for more information
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.ClassWithin">
            <summary>
            The required type for the outer of instances of this class
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.ClassConfigName">
            <summary>
            Which Name.ini file to load Config variables out of
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.Interfaces">
            <summary>
            The list of interfaces which this class implements, along with the pointer property that is located at the offset of the interface's vtable.
            If the interface class isn't native, the property will be empty.
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.ClassGeneratedBy">
            <summary>
            This is the blueprint that caused the generation of this class, or null if it is a native compiled-in class
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.bDeprecatedForceScriptOrder">
            <summary>
            Does this class use deprecated script order?
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.bCooked">
            <summary>
            Used to check if the class was cooked or not
            </summary>
        </member>
        <member name="F:UAssetAPI.ClassExport.ClassDefaultObject">
            <summary>
            The class default object; used for delta serialization and object initialization
            </summary>
        </member>
        <member name="T:UAssetAPI.UDataTable">
            <summary>
            Imported spreadsheet table.
            </summary>
        </member>
        <member name="T:UAssetAPI.DataTableExport">
            <summary>
            Export for an imported spreadsheet table. See <see cref="T:UAssetAPI.UDataTable"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.NormalExport">
            <summary>
            A regular export, with no special serialization. Serialized as a None-terminated property list.
            </summary>
        </member>
        <member name="P:UAssetAPI.NormalExport.Item(UAssetAPI.FName)">
            <summary>
            Gets or sets the value associated with the specified key. This operation loops linearly, so it may not be suitable for high-performance environments.
            </summary>
            <param name="key">The key associated with the value to get or set.</param>
        </member>
        <member name="P:UAssetAPI.NormalExport.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key. This operation loops linearly, so it may not be suitable for high-performance environments.
            </summary>
            <param name="key">The key associated with the value to get or set.</param>
        </member>
        <member name="P:UAssetAPI.NormalExport.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The index of the value to get or set.</param>
        </member>
        <member name="T:UAssetAPI.FunctionExport">
            <summary>
            Export data for a blueprint function.
            </summary>
        </member>
        <member name="T:UAssetAPI.RawExport">
            <summary>
            An export that could not be properly parsed by UAssetAPI, and is instead represented as an array of bytes as a fallback.
            </summary>
        </member>
        <member name="T:UAssetAPI.ECppForm">
            <summary>How this enum is declared in C++. Affects the internal naming of enum values.</summary>
        </member>
        <member name="T:UAssetAPI.UEnum">
            <summary>
            Reflection data for an enumeration.
            </summary>
        </member>
        <member name="F:UAssetAPI.UEnum.Names">
            <summary>List of pairs of all enum names and values.</summary>
        </member>
        <member name="F:UAssetAPI.UEnum.CppForm">
            <summary>How the enum was originally defined.</summary>
        </member>
        <member name="T:UAssetAPI.EnumExport">
            <summary>
            Export data for an enumeration. See <see cref="T:UAssetAPI.UEnum"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.EnumExport.Enum">
            <summary>The enum that is stored in this export.</summary>
        </member>
        <member name="T:UAssetAPI.PropertyExport">
            <summary>
            Export data for a <see cref="T:UAssetAPI.FieldTypes.UProperty"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.FStringTable">
            <summary>
            A string table. Holds Key->SourceString pairs of text.
            </summary>
        </member>
        <member name="T:UAssetAPI.StringTableExport">
            <summary>
            Export data for a string table. See <see cref="T:UAssetAPI.FStringTable"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructExport">
            <summary>
            Base export for all UObject types that contain fields.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructExport.SuperStruct">
            <summary>
            Struct this inherits from, may be null
            </summary>
        </member>
        <member name="F:UAssetAPI.StructExport.Children">
            <summary>
            List of child fields
            </summary>
        </member>
        <member name="F:UAssetAPI.StructExport.LoadedProperties">
            <summary>
            Properties serialized with this struct definition
            </summary>
        </member>
        <member name="F:UAssetAPI.StructExport.ScriptBytecode">
            <summary>
            The bytecode instructions contained within this struct.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructExport.ScriptBytecodeSize">
            <summary>
            Bytecode size in total in deserialized memory. Filled out in lieu of <see cref="F:UAssetAPI.StructExport.ScriptBytecode"/> if an error occurs during bytecode parsing.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructExport.ScriptBytecodeRaw">
            <summary>
            Raw binary bytecode data. Filled out in lieu of <see cref="F:UAssetAPI.StructExport.ScriptBytecode"/> if an error occurs during bytecode parsing.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructExport.ParseBytecode">
            <summary>
            A static bool that determines whether or not the serializer will attempt to parse Kismet bytecode.
            </summary>
        </member>
        <member name="F:UAssetAPI.FFieldPath.Path">
            <summary>
            Path to the FField object from the innermost FField to the outermost UObject (UPackage)
            </summary>
        </member>
        <member name="F:UAssetAPI.FFieldPath.ResolvedOwner">
            <summary>
            The cached owner of this field.
            </summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.EArrayDim">
            <summary>
            The type of array that this property represents. This is represented an integer in the engine.
            </summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.ELifetimeCondition">
            <summary>Secondary condition to check before considering the replication of a lifetime property.</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_None">
            <summary>This property has no condition, and will send anytime it changes</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_InitialOnly">
            <summary>This property will only attempt to send on the initial bunch</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_OwnerOnly">
            <summary>This property will only send to the actor's owner</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_SkipOwner">
            <summary>This property send to every connection EXCEPT the owner</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_SimulatedOnly">
            <summary>This property will only send to simulated actors</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_AutonomousOnly">
            <summary>This property will only send to autonomous actors</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_SimulatedOrPhysics">
            <summary>This property will send to simulated OR bRepPhysics actors</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_InitialOrOwner">
            <summary>This property will send on the initial packet, or to the actors owner</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_Custom">
            <summary>This property has no particular condition, but wants the ability to toggle on/off via SetCustomIsActiveOverride</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_ReplayOrOwner">
            <summary>This property will only send to the replay connection, or to the actors owner</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_ReplayOnly">
            <summary>This property will only send to the replay connection</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_SimulatedOnlyNoReplay">
            <summary>This property will send to actors only, but not to replay connections</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_SimulatedOrPhysicsNoReplay">
            <summary>This property will send to simulated Or bRepPhysics actors, but not to replay connections</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_SkipReplay">
            <summary>This property will not send to the replay connection</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.ELifetimeCondition.COND_Never">
            <summary>This property will never be replicated</summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.UField">
            <summary>
            Base class of reflection data objects.
            </summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.UField.Next">
            <summary>
            Next Field in the linked list
            </summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.UProperty">
            <summary>
            An UnrealScript variable.
            </summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.UEnumProperty.Enum">
            <summary>A pointer to the UEnum represented by this property</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.UEnumProperty.UnderlyingProp">
            <summary>The FNumericProperty which represents the underlying type of the enum</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.UByteProperty.Enum">
            <summary>A pointer to the UEnum represented by this property</summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.UGenericProperty">
            <summary>
            This is a UAssetAPI-specific property that represents anything that we don't have special serialization for
            </summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.FField">
            <summary>
            Base class of reflection data objects.
            </summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.FProperty">
            <summary>
            An UnrealScript variable.
            </summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.FEnumProperty.Enum">
            <summary>A pointer to the UEnum represented by this property</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.FEnumProperty.UnderlyingProp">
            <summary>The FNumericProperty which represents the underlying type of the enum</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.FBoolProperty.FieldSize">
            <summary>Size of the bitfield/bool property. Equal to ElementSize but used to check if the property has been properly initialized (0-8, where 0 means uninitialized).</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.FBoolProperty.ByteOffset">
            <summary>Offset from the memeber variable to the byte of the property (0-7).</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.FBoolProperty.ByteMask">
            <summary>Mask of the byte with the property value.</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.FBoolProperty.FieldMask">
            <summary>Mask of the field with the property value. Either equal to ByteMask or 255 in case of 'bool' type.</summary>
        </member>
        <member name="F:UAssetAPI.FieldTypes.FByteProperty.Enum">
            <summary>A pointer to the UEnum represented by this property</summary>
        </member>
        <member name="T:UAssetAPI.FieldTypes.FGenericProperty">
            <summary>
            This is a UAssetAPI-specific property that represents anything that we don't have special serialization for
            </summary>
        </member>
        <member name="T:UAssetAPI.FString">
            <summary>
            Unreal string - consists of a string and an encoding
            </summary>
        </member>
        <member name="T:UAssetAPI.FName">
            <summary>
            Unreal name - consists of an FString (which is serialized as an index in the name map) and an instance number
            </summary>
        </member>
        <member name="F:UAssetAPI.FName.Number">
            <summary>Instance number.</summary>
        </member>
        <member name="M:UAssetAPI.FName.ToString">
            <summary>
            Converts this FName instance into a human-readable string. This is the inverse of <see cref="M:UAssetAPI.FName.FromString(System.String)"/>.
            </summary>
            <returns>The human-readable string that represents this FName.</returns>
            <remarks>
            The human-readable string is formatted as the string representation of the <see cref="F:UAssetAPI.FName.Value"/> followed by the instance number <see cref="F:UAssetAPI.FName.Number"/> in parentheses. In some special cases, the number in parentheses will be omitted, in which case it is safe to assume that it is zero.
            </remarks>
        </member>
        <member name="M:UAssetAPI.FName.FromString(System.String)">
            <summary>
            Converts a human-readable string into an FName instance. This is the inverse of <see cref="M:UAssetAPI.FName.ToString"/>.
            </summary>
            <param name="val">The human-readable string to convert into an FName instance.</param>
            <returns>An FName instance that this string represents.</returns>
            <remarks>
            If the string ends in a decimal number surrounded by parentheses, such as in alphabet(2), the number inside parentheses (2) will be used as the instance number and the rest of the string will be used as the value (alphabet).
            Otherwise, the string itself will become the value of the new instance, and the instance number will default to zero.
            </remarks>
        </member>
        <member name="M:UAssetAPI.FName.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new FName instance.
            </summary>
            <param name="value">The string literal that the new FName's value will be, verbatim.</param>
            <param name="number">The instance number of the new FName.</param>
        </member>
        <member name="M:UAssetAPI.FName.#ctor(UAssetAPI.FString,System.Int32)">
            <summary>
            Creates a new FName instance.
            </summary>
            <param name="value">The FString that the FName's value will be, verbatim.</param>
            <param name="number">The instance number of the new FName.</param>
        </member>
        <member name="M:UAssetAPI.FName.#ctor">
            <summary>
            Creates a new blank FName instance.
            </summary>
        </member>
        <member name="T:UAssetAPI.EObjectFlags">
            <summary>
            Flags describing an object instance
            </summary>
        </member>
        <member name="T:UAssetAPI.EPackageFlags">
            <summary>
            Package flags, passed into UPackage::SetPackageFlags and related functions in the Unreal Engine
            </summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_None">
            <summary>No flags</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_NewlyCreated">
            <summary>Newly created package, not saved yet. In editor only.</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ClientOptional">
            <summary>Purely optional for clients.</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ServerSideOnly">
            <summary>Only needed on the server side.</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_CompiledIn">
            <summary>This package is from "compiled in" classes.</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ForDiffing">
            <summary>This package was loaded just for the purposes of diffing</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_EditorOnly">
            <summary>This is editor-only package (for example: editor module script package)</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_Developer">
            <summary>Developer module</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_UncookedOnly">
            <summary>Loaded only in uncooked builds (i.e. runtime in editor)</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_Cooked">
            <summary>Package is cooked</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ContainsNoAsset">
            <summary>Package doesn't contain any asset object (although asset tags can be present)</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_UnversionedProperties">
            <summary>Uses unversioned property serialization instead of versioned tagged property serialization</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ContainsMapData">
            <summary>Contains map data (UObjects only referenced by a single ULevel) but is stored in a different package</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_Compiling">
            <summary>package is currently being compiled</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ContainsMap">
            <summary>Set if the package contains a ULevel/ UWorld object</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_RequiresLocalizationGather">
            <summary>???</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_PlayInEditor">
            <summary>Set if the package was created for the purpose of PIE</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ContainsScript">
            <summary>Package is allowed to contain UClass objects</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_DisallowExport">
            <summary>Editor should not export asset in this package</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_DynamicImports">
            <summary>This package should resolve dynamic imports from its export at runtime.</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_RuntimeGenerated">
            <summary>This package contains elements that are runtime generated, and may not follow standard loading order rules</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_ReloadingForCooker">
            <summary>This package is reloading in the cooker, try to avoid getting data we will never need. We won't save this package.</summary>
        </member>
        <member name="F:UAssetAPI.EPackageFlags.PKG_FilterEditorOnly">
            <summary>Package has editor-only data filtered out</summary>
        </member>
        <member name="T:UAssetAPI.EPropertyFlags">
            <summary>
            Flags associated with each property in a class, overriding the property's default behavior.
            </summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Edit">
            <summary>Property is user-settable in the editor.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_ConstParm">
            <summary>This is a constant function parameter</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_BlueprintVisible">
            <summary>This property can be read by blueprint code</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_ExportObject">
            <summary>Object can be exported with actor.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_BlueprintReadOnly">
            <summary>This property cannot be modified by blueprint code</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Net">
            <summary>Property is relevant to network replication.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_EditFixedSize">
            <summary>Indicates that elements of an array can be modified, but its size cannot be changed.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Parm">
            <summary>Function/When call parameter.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_OutParm">
            <summary>Value is copied out after function call.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_ZeroConstructor">
            <summary>memset is fine for construction</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_ReturnParm">
            <summary>Return value.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_DisableEditOnTemplate">
            <summary>Disable editing of this property on an archetype/sub-blueprint</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Transient">
            <summary>Property is transient: shouldn't be saved or loaded, except for Blueprint CDOs.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Config">
            <summary>Property should be loaded/saved as permanent profile.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_DisableEditOnInstance">
            <summary>Disable editing on an instance of this class</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_EditConst">
            <summary>Property is uneditable in the editor.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_GlobalConfig">
            <summary>Load config from base class, not subclass.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_InstancedReference">
            <summary>Property is a component references.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_DuplicateTransient">
            <summary>Property should always be reset to the default value during any type of duplication (copy/paste, binary duplication, etc.)</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_SaveGame">
            <summary>Property should be serialized for save games, this is only checked for game-specific archives with ArIsSaveGame</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_NoClear">
            <summary>Hide clear (and browse) button.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_ReferenceParm">
            <summary>Value is passed by reference; CPF_OutParam and CPF_Param should also be set.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_BlueprintAssignable">
            <summary>MC Delegates only.  Property should be exposed for assigning in blueprint code</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Deprecated">
            <summary>Property is deprecated.  Read it from an archive, but don't save it.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_IsPlainOldData">
            <summary>If this is set, then the property can be memcopied instead of CopyCompleteValue / CopySingleValue</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_RepSkip">
            <summary>Not replicated. For non replicated properties in replicated structs </summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_RepNotify">
            <summary>Notify actors when a property is replicated</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Interp">
            <summary>interpolatable property for use with matinee</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_NonTransactional">
            <summary>Property isn't transacted</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_EditorOnly">
            <summary>Property should only be loaded in the editor</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_NoDestructor">
            <summary>No destructor</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_AutoWeak">
            <summary>Only used for weak pointers, means the export type is autoweak</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_ContainsInstancedReference">
            <summary>Property contains component references.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_AssetRegistrySearchable">
            <summary>asset instances will add properties with this flag to the asset registry automatically</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_SimpleDisplay">
            <summary>The property is visible by default in the editor details view</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_AdvancedDisplay">
            <summary>The property is advanced and not visible by default in the editor details view</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_Protected">
            <summary>property is protected from the perspective of script</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_BlueprintCallable">
            <summary>MC Delegates only.  Property should be exposed for calling in blueprint code</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_BlueprintAuthorityOnly">
            <summary>MC Delegates only.  This delegate accepts (only in blueprint) only events with BlueprintAuthorityOnly.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_TextExportTransient">
            <summary>Property shouldn't be exported to text format (e.g. copy/paste)</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_NonPIEDuplicateTransient">
            <summary>Property should only be copied in PIE</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_ExposeOnSpawn">
            <summary>Property is exposed on spawn</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_PersistentInstance">
            <summary>A object referenced by the property is duplicated like a component. (Each actor should have an own instance.)</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_UObjectWrapper">
            <summary>Property was parsed as a wrapper class like TSubclassOf T, FScriptInterface etc., rather than a USomething*</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_HasGetValueTypeHash">
            <summary>This property can generate a meaningful hash value.</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_NativeAccessSpecifierPublic">
            <summary>Public native access specifier</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_NativeAccessSpecifierProtected">
            <summary>Protected native access specifier</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_NativeAccessSpecifierPrivate">
            <summary>Private native access specifier</summary>
        </member>
        <member name="F:UAssetAPI.EPropertyFlags.CPF_SkipSerialization">
            <summary>Property shouldn't be serialized, can still be exported to text</summary>
        </member>
        <member name="T:UAssetAPI.EClassFlags">
            <summary>
            Flags describing a class.
            </summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_None">
            <summary>No Flags</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Abstract">
            <summary>Class is abstract and can't be instantiated directly.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_DefaultConfig">
            <summary>Save object configuration only to Default INIs, never to local INIs. Must be combined with CLASS_Config</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Config">
            <summary>Load object configuration at construction time.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Transient">
            <summary>This object type can't be saved; null it out at save time.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Parsed">
            <summary>Successfully parsed.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_MatchedSerializers">
            <summary>???</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_ProjectUserConfig">
            <summary>Indicates that the config settings for this class will be saved to Project/User*.ini (similar to CLASS_GlobalUserConfig)</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Native">
            <summary>Class is a native class - native interfaces will have CLASS_Native set, but not RF_MarkAsNative</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_NoExport">
            <summary>Don't export to C++ header.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_NotPlaceable">
            <summary>Do not allow users to create in the editor.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_PerObjectConfig">
            <summary>Handle object configuration on a per-object basis, rather than per-class.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_ReplicationDataIsSetUp">
            <summary>Whether SetUpRuntimeReplicationData still needs to be called for this class</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_EditInlineNew">
            <summary>Class can be constructed from editinline New button.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_CollapseCategories">
            <summary>Display properties in the editor without using categories.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Interface">
            <summary>Class is an interface</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_CustomConstructor">
            <summary>Do not export a constructor for this class, assuming it is in the cpptext</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Const">
            <summary>All properties and functions in this class are const and should be exported as const</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_LayoutChanging">
            <summary>Class flag indicating the class is having its layout changed, and therefore is not ready for a CDO to be created</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_CompiledFromBlueprint">
            <summary>Indicates that the class was created from blueprint source material</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_MinimalAPI">
            <summary>Indicates that only the bare minimum bits of this class should be DLL exported/imported</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_RequiredAPI">
            <summary>Indicates this class must be DLL exported/imported (along with all of it's members)</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_DefaultToInstanced">
            <summary>Indicates that references to this class default to instanced. Used to be subclasses of UComponent, but now can be any UObject</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_TokenStreamAssembled">
            <summary>Indicates that the parent token stream has been merged with ours.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_HasInstancedReference">
            <summary>Class has component properties.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Hidden">
            <summary>Don't show this class in the editor class browser or edit inline new menus.</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Deprecated">
            <summary>Don't save objects of this class when serializing</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_HideDropDown">
            <summary>Class not shown in editor drop down for class selection</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_GlobalUserConfig">
            <summary>Class settings are saved to AppData/..../Blah.ini (as opposed to CLASS_DefaultConfig)</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Intrinsic">
            <summary>Class was declared directly in C++ and has no boilerplate generated by UnrealHeaderTool</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_Constructed">
            <summary>Class has already been constructed (maybe in a previous DLL version before hot-reload).</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_ConfigDoNotCheckDefaults">
            <summary>Indicates that object configuration will not check against ini base/defaults when serialized</summary>
        </member>
        <member name="F:UAssetAPI.EClassFlags.CLASS_NewerVersionExists">
            <summary>Class has been consigned to oblivion as part of a blueprint recompile, and a newer version currently exists.</summary>
        </member>
        <member name="T:UAssetAPI.FQuat">
            <summary>
            Floating point quaternion that can represent a rotation about an axis in 3-D space.
            The X, Y, Z, W components also double as the Axis/Angle format.
            </summary>
        </member>
        <member name="F:UAssetAPI.FQuat.X">
            <summary>The quaternion's X-component.</summary>
        </member>
        <member name="F:UAssetAPI.FQuat.Y">
            <summary>The quaternion's Y-component.</summary>
        </member>
        <member name="F:UAssetAPI.FQuat.Z">
            <summary>The quaternion's Z-component.</summary>
        </member>
        <member name="F:UAssetAPI.FQuat.W">
            <summary>The quaternion's W-component.</summary>
        </member>
        <member name="T:UAssetAPI.FRotator">
            <summary>
            Implements a container for rotation information.
            All rotation values are stored in degrees.
            </summary>
        </member>
        <member name="F:UAssetAPI.FRotator.Pitch">
            <summary>Rotation around the right axis (around Y axis), Looking up and down (0=Straight Ahead, +Up, -Down)</summary>
        </member>
        <member name="F:UAssetAPI.FRotator.Yaw">
            <summary>Rotation around the up axis (around Z axis), Running in circles 0=East, +North, -South.</summary>
        </member>
        <member name="F:UAssetAPI.FRotator.Roll">
            <summary>Rotation around the forward axis (around X axis), Tilting your head, 0=Straight, +Clockwise, -CCW.</summary>
        </member>
        <member name="T:UAssetAPI.FTransform">
            <summary>
            Transform composed of Scale, Rotation (as a quaternion), and Translation.
            Transforms can be used to convert from one space to another, for example by transforming
            positions and directions from local space to world space.
            
            Transformation of position vectors is applied in the order:  Scale -> Rotate -> Translate.
            Transformation of direction vectors is applied in the order: Scale -> Rotate.
            
            Order matters when composing transforms: C = A * B will yield a transform C that logically
            first applies A then B to any subsequent transformation. Note that this is the opposite order of quaternion (FQuat) multiplication.
            
            Example: LocalToWorld = (DeltaRotation * LocalToWorld) will change rotation in local space by DeltaRotation.
            Example: LocalToWorld = (LocalToWorld * DeltaRotation) will change rotation in world space by DeltaRotation.
            </summary>
        </member>
        <member name="F:UAssetAPI.FTransform.Rotation">
            <summary>
            Rotation of this transformation, as a quaternion
            </summary>
        </member>
        <member name="F:UAssetAPI.FTransform.Translation">
            <summary>
            Translation of this transformation, as a vector.
            </summary>
        </member>
        <member name="F:UAssetAPI.FTransform.Scale3D">
            <summary>
            3D scale (always applied in local space) as a vector.
            </summary>
        </member>
        <member name="T:UAssetAPI.FVector">
            <summary>
            A vector in 3-D space composed of components (X, Y, Z) with floating point precision.
            </summary>
        </member>
        <member name="F:UAssetAPI.FVector.X">
            <summary>Vector's X-component.</summary>
        </member>
        <member name="F:UAssetAPI.FVector.Y">
            <summary>Vector's Y-component.</summary>
        </member>
        <member name="F:UAssetAPI.FVector.Z">
            <summary>Vector's Z-component.</summary>
        </member>
        <member name="T:UAssetAPI.FObjectResource">
            <summary>
            Base class for UObject resource types. FObjectResources are used to store UObjects on disk
            via the import map (for resources contained in other packages) and export map (for resources
            contained within the same package).
            </summary>
        </member>
        <member name="F:UAssetAPI.FObjectResource.ObjectName">
            <summary>The name of the UObject represented by this resource.</summary>
        </member>
        <member name="F:UAssetAPI.FObjectResource.OuterIndex">
            <summary>Location of the resource for this resource's Outer (import/other export). 0 = this resource is a top-level UPackage</summary>
        </member>
        <member name="T:UAssetAPI.FPackageIndex">
            <summary>
            Wrapper for index into an ImportMap or ExportMap.
            
            Values greater than zero indicate that this is an index into the ExportMap.
            The actual array index will be (FPackageIndex - 1).
            
            Values less than zero indicate that this is an index into the ImportMap.
            The actual array index will be (-FPackageIndex - 1)
            </summary>
        </member>
        <member name="F:UAssetAPI.FPackageIndex.Index">
            <summary>
            Values greater than zero indicate that this is an index into the ExportMap.
            The actual array index will be (FPackageIndex - 1).
            
            Values less than zero indicate that this is an index into the ImportMap.
            The actual array index will be (-FPackageIndex - 1)
            </summary>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.FromRawIndex(System.Int32)">
            <summary>
            Returns an FPackageIndex based off of the index provided. Equivalent to <see cref="M:UAssetAPI.FPackageIndex.#ctor(System.Int32)"/>.
            </summary>
            <param name="index">The index to create a new FPackageIndex with.</param>
            <returns>A new FPackageIndex with the index provided.</returns>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.IsImport">
            <summary>
            Returns true if this is an index into the import map.
            </summary>
            <returns>true if this is an index into the import map, false otherwise</returns>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.IsExport">
            <summary>
            Returns true if this is an index into the export map.
            </summary>
            <returns>true if this is an index into the export map, false otherwise</returns>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.IsNull">
            <summary>
            Return true if this represents null (i.e. neither an import nor an export)
            </summary>
            <returns>true if this index represents null, false otherwise</returns>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.FromImport(System.Int32)">
            <summary>
            Creates a FPackageIndex from an index in the import map.
            </summary>
            <param name="importIndex">An import index to create an FPackageIndex from.</param>
            <returns>An FPackageIndex created from the import index.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the provided import index is less than zero.</exception>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.FromExport(System.Int32)">
            <summary>
            Creates a FPackageIndex from an index in the export map.
            </summary>
            <param name="exportIndex">An export index to create an FPackageIndex from.</param>
            <returns>An FPackageIndex created from the export index.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the provided export index is less than zero.</exception>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.ToImport(UAssetAPI.UAsset)">
            <summary>
            Check that this is an import index and return the corresponding import.
            </summary>
            <param name="asset">The asset that this index is used in.</param>
            <returns>The import that this index represents in the import map.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when this is not an index into the import map.</exception>
        </member>
        <member name="M:UAssetAPI.FPackageIndex.ToExport(UAssetAPI.UAsset)">
            <summary>
            Check that this is an export index and return the corresponding export.
            </summary>
            <param name="asset">The asset that this index is used in.</param>
            <returns>The export that this index represents in the the export map.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when this is not an index into the export map.</exception>
        </member>
        <member name="T:UAssetAPI.FWorldTileLayer">
            <summary>
            World layer information for tile tagging
            </summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLayer.Name">
            <summary>Human readable name for this layer</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLayer.Reserved0">
            <summary>Reserved for additional options</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLayer.Reserved1">
            <summary>Reserved for additional options</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLayer.StreamingDistance">
            <summary>Distance starting from where tiles belonging to this layer will be streamed in</summary>
        </member>
        <member name="T:UAssetAPI.FWorldTileLODInfo">
            <summary>
            Describes LOD entry in a world tile
            </summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLODInfo.RelativeStreamingDistance">
            <summary>Relative to LOD0 streaming distance, absolute distance = LOD0 + StreamingDistanceDelta</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLODInfo.Reserved0">
            <summary>Reserved for additional options</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLODInfo.Reserved1">
            <summary>Reserved for additional options</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLODInfo.Reserved2">
            <summary>Reserved for additional options</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileLODInfo.Reserved3">
            <summary>Reserved for additional options</summary>
        </member>
        <member name="T:UAssetAPI.FWorldTileInfo">
            <summary>
            Tile information used by WorldComposition.
            Defines properties necessary for tile positioning in the world. Stored with package summary
            </summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.Position">
            <summary>Tile position in the world relative to parent</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.AbsolutePosition">
            <summary>Absolute tile position in the world. Calculated in runtime</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.Bounds">
            <summary>Tile bounding box</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.Layer">
            <summary>Tile assigned layer</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.bHideInTileView">
            <summary>Whether to hide sub-level tile in tile view</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.ParentTilePackageName">
            <summary>Parent tile package name</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.LODList">
            <summary>LOD information</summary>
        </member>
        <member name="F:UAssetAPI.FWorldTileInfo.ZOrder">
            <summary>Sorting order</summary>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.KismetPropertyPointer">
            <summary>
            Represents a Kismet bytecode pointer to an FProperty or FField.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.KismetPropertyPointer.Old">
            <summary>
            The pointer serialized as an FPackageIndex. Used in versions older than <see cref="F:UAssetAPI.Kismet.Bytecode.KismetPropertyPointer.XFER_PROP_POINTER_SWITCH_TO_SERIALIZING_AS_FIELD_PATH_VERSION"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.KismetPropertyPointer.New">
            <summary>
            The pointer serialized as an FFieldPath. Used in versions newer than <see cref="F:UAssetAPI.Kismet.Bytecode.KismetPropertyPointer.XFER_PROP_POINTER_SWITCH_TO_SERIALIZING_AS_FIELD_PATH_VERSION"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType">
            <summary>
            Kinds of text literals
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.Empty">
            <summary>
            Text is an empty string. The bytecode contains no strings, and you should use FText::GetEmpty() to initialize the FText instance.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.LocalizedText">
            <summary>
            Text is localized. The bytecode will contain three strings - source, key, and namespace - and should be loaded via FInternationalization
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.InvariantText">
            <summary>
            Text is culture invariant. The bytecode will contain one string, and you should use FText::AsCultureInvariant to initialize the FText instance.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.LiteralString">
            <summary>
            Text is a literal FString. The bytecode will contain one string, and you should use FText::FromString to initialize the FText instance.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.StringTableEntry">
            <summary>
            Text is from a string table. The bytecode will contain an object pointer (not used) and two strings - the table ID, and key - and should be found via FText::FromStringTable
            </summary>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.KismetExpression">
            <summary>
            A Kismet bytecode instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.KismetExpression.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.KismetExpression.Tag">
            <summary>
            An optional tag which can be set on any expression in memory. This is for the user only, and has no bearing in the API itself.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.KismetExpression.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out an expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.KismetExpression.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes an expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.KismetExpression`1.Value">
            <summary>
            The value of this expression if it is a constant.
            </summary>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.EExprToken">
            <summary>
            Evaluatable expression item types.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalVariable">
            <summary>A local variable.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InstanceVariable">
            <summary>An object variable.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_DefaultVariable">
            <summary>Default variable for a class context.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Return">
            <summary>Return from function.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Jump">
            <summary>Goto a local address in code.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_JumpIfNot">
            <summary>Goto if not expression.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Assert">
            <summary>Assertion.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Nothing">
            <summary>No operation.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Let">
            <summary>Assign an arbitrary size value to a variable.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ClassContext">
            <summary>Class default object context.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_MetaCast">
            <summary>Metaclass cast.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetBool">
            <summary>Let boolean variable.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndParmValue">
            <summary>end of default value for optional function parameter</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndFunctionParms">
            <summary>End of function call parameters.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Self">
            <summary>Self object.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Skip">
            <summary>Skippable expression.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Context">
            <summary>Call a function through an object context.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Context_FailSilent">
            <summary>Call a function through an object context (can fail silently if the context is NULL; only generated for functions that don't have output or return values).</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_VirtualFunction">
            <summary>A function call with parameters.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_FinalFunction">
            <summary>A prebound function call with parameters.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntConst">
            <summary>Int constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_FloatConst">
            <summary>Floating point constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_StringConst">
            <summary>String constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ObjectConst">
            <summary>An object constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_NameConst">
            <summary>A name constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_RotationConst">
            <summary>A rotation constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_VectorConst">
            <summary>A vector constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ByteConst">
            <summary>A byte constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntZero">
            <summary>Zero.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntOne">
            <summary>One.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_True">
            <summary>Bool True.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_False">
            <summary>Bool False.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_TextConst">
            <summary>FText constant</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_NoObject">
            <summary>NoObject.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_TransformConst">
            <summary>A transform constant</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntConstByte">
            <summary>Int constant that requires 1 byte.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_NoInterface">
            <summary>A null interface (similar to EX_NoObject, but for interfaces)</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_DynamicCast">
            <summary>Safe dynamic class casting.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_StructConst">
            <summary>An arbitrary UStruct constant</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndStructConst">
            <summary>End of UStruct constant</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SetArray">
            <summary>Set the value of arbitrary array</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PropertyConst">
            <summary>FProperty constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_UnicodeStringConst">
            <summary>Unicode string constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Int64Const">
            <summary>64-bit integer constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_UInt64Const">
            <summary>64-bit unsigned integer constant.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PrimitiveCast">
            <summary>A casting operator for primitives which reads the type as the subsequent byte</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_StructMemberContext">
            <summary>Context expression to address a property within a struct</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetMulticastDelegate">
            <summary>Assignment to a multi-cast delegate</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetDelegate">
            <summary>Assignment to a delegate</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalVirtualFunction">
            <summary>Special instructions to quickly call a virtual function that we know is going to run only locally</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalFinalFunction">
            <summary>Special instructions to quickly call a final function that we know is going to run only locally</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalOutVariable">
            <summary>local out (pass by reference) function parameter</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InstanceDelegate">
            <summary>const reference to a delegate or normal function object</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PushExecutionFlow">
            <summary>push an address on to the execution flow stack for future execution when a EX_PopExecutionFlow is executed. Execution continues on normally and doesn't change to the pushed address.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PopExecutionFlow">
            <summary>continue execution at the last address previously pushed onto the execution flow stack.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ComputedJump">
            <summary>Goto a local address in code, specified by an integer value.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PopExecutionFlowIfNot">
            <summary>continue execution at the last address previously pushed onto the execution flow stack, if the condition is not true.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Breakpoint">
            <summary>Breakpoint. Only observed in the editor, otherwise it behaves like EX_Nothing.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InterfaceContext">
            <summary>Call a function through a native interface variable</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ObjToInterfaceCast">
            <summary>Converting an object reference to native interface variable</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndOfScript">
            <summary>Last byte in script code</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_CrossInterfaceCast">
            <summary>Converting an interface variable reference to native interface variable</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InterfaceToObjCast">
            <summary>Converting an interface variable reference to an object</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_WireTracepoint">
            <summary>Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SkipOffsetConst">
            <summary>A CodeSizeSkipOffset constant</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_AddMulticastDelegate">
            <summary>Adds a delegate to a multicast delegate's targets</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ClearMulticastDelegate">
            <summary>Clears all delegates in a multicast target</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Tracepoint">
            <summary>Trace point.  Only observed in the editor, otherwise it behaves like EX_Nothing.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetObj">
            <summary>assign to any object ref pointer</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetWeakObjPtr">
            <summary>assign to a weak object pointer</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_BindDelegate">
            <summary>bind object and name to delegate</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_RemoveMulticastDelegate">
            <summary>Remove a delegate from a multicast delegate's targets</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_CallMulticastDelegate">
            <summary>Call multicast delegate</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_CallMath">
            <summary>static pure function from on local call space</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InstrumentationEvent">
            <summary>Instrumentation event</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ClassSparseDataVariable">
            <summary>Sparse data variable</summary>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_AddMulticastDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_AddMulticastDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_AddMulticastDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_AddMulticastDelegate.Delegate">
            <summary>
            Delegate property to assign to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_AddMulticastDelegate.DelegateToAdd">
            <summary>
            Delegate to add to the MC delegate for broadcast.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_AddMulticastDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_AddMulticastDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ArrayConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayConst.InnerProperty">
            <summary>
            Pointer to this constant's inner property (FProperty*).
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayConst.Elements">
            <summary>
            Array constant entries.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayGetByRef">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ArrayGetByRef"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayGetByRef.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayGetByRef.ArrayVariable">
            <summary>
            The array variable.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayGetByRef.ArrayIndex">
            <summary>
            The index to access in the array.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayGetByRef.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ArrayGetByRef.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Assert">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Assert"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Assert.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Assert.LineNumber">
            <summary>
            Line number.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Assert.DebugMode">
            <summary>
            Whether or not this assertion is in debug mode.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Assert.AssertExpression">
            <summary>
            Expression to assert.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Assert.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Assert.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_BindDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_BindDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_BindDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_BindDelegate.FunctionName">
            <summary>
            The name of the function assigned to the delegate.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_BindDelegate.Delegate">
            <summary>
            Delegate property to assign to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_BindDelegate.ObjectTerm">
            <summary>
            Object to bind.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_BindDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_BindDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Breakpoint">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Breakpoint"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Breakpoint.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Breakpoint.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Breakpoint.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ByteConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ByteConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ByteConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ByteConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ByteConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMath">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_CallMath"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMath.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMath.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMath.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMulticastDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_CallMulticastDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMulticastDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMulticastDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_CallMulticastDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassContext">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ClassContext"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassContext.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassContext.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassContext.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassSparseDataVariable">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ClassSparseDataVariable"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassSparseDataVariable.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassSparseDataVariable.Variable">
            <summary>
            A pointer to the variable in question.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassSparseDataVariable.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClassSparseDataVariable.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClearMulticastDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ClearMulticastDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClearMulticastDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClearMulticastDelegate.DelegateToClear">
            <summary>
            Delegate property to clear.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClearMulticastDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ClearMulticastDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ComputedJump">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ComputedJump"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ComputedJump.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ComputedJump.CodeOffsetExpression">
            <summary>
            An integer expression corresponding to the offset to jump to.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ComputedJump.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ComputedJump.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Context"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context.ObjectExpression">
            <summary>
            Object expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context.Offset">
            <summary>
            Code offset for NULL expressions.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context.RValuePointer">
            <summary>
            Property corresponding to the r-value data, in case the l-value needs to be mem-zero'd. FField*
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context.ContextExpression">
            <summary>
            Context expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context_FailSilent">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Context_FailSilent"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context_FailSilent.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context_FailSilent.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Context_FailSilent.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_CrossInterfaceCast">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_CrossInterfaceCast"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_CrossInterfaceCast.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_CrossInterfaceCast.ClassPtr">
            <summary>
            A pointer to the interface class to convert to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_CrossInterfaceCast.Target">
            <summary>
            The target of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_CrossInterfaceCast.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_CrossInterfaceCast.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_DefaultVariable">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_DefaultVariable"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_DefaultVariable.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_DefaultVariable.Variable">
            <summary>
            A pointer to the variable in question.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_DefaultVariable.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_DefaultVariable.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_DeprecatedOp4A">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_DeprecatedOp4A"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_DeprecatedOp4A.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_DeprecatedOp4A.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_DeprecatedOp4A.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_DynamicCast">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_DynamicCast"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_DynamicCast.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_DynamicCast.ClassPtr">
            <summary>
            A pointer to the relevant class (UClass*).
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_DynamicCast.TargetExpression">
            <summary>
            The target expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_DynamicCast.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_DynamicCast.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArray">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndArray"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArray.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArray.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArray.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArrayConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndArrayConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArrayConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArrayConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndArrayConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndFunctionParms">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndFunctionParms"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndFunctionParms.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndFunctionParms.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndFunctionParms.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMap">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndMap"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMap.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMap.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMap.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMapConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndMapConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMapConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMapConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndMapConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndOfScript">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndOfScript"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndOfScript.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndOfScript.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndOfScript.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndParmValue">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndParmValue"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndParmValue.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndParmValue.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndParmValue.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSet">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndSet"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSet.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSet.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSet.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSetConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndSetConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSetConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSetConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndSetConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndStructConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_EndStructConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndStructConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndStructConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_EndStructConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_False">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_False"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_False.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_False.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_False.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_FieldPathConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_FieldPathConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_FieldPathConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_FieldPathConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_FieldPathConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_FinalFunction">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_FinalFunction"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_FinalFunction.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_FinalFunction.StackNode">
            <summary>
            Stack node.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_FinalFunction.Parameters">
            <summary>
            List of parameters for this function.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_FinalFunction.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_FinalFunction.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_FloatConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_FloatConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_FloatConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_FloatConst.Value">
            <summary>
            The value of this float constant expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_FloatConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_FloatConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InstanceDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceDelegate.FunctionName">
            <summary>
            The name of the function assigned to the delegate.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceVariable">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InstanceVariable"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceVariable.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceVariable.Variable">
            <summary>
            A pointer to the variable in question.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceVariable.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstanceVariable.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstrumentationEvent">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InstrumentationEvent"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstrumentationEvent.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstrumentationEvent.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InstrumentationEvent.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Int64Const">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Int64Const"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Int64Const.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Int64Const.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Int64Const.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConstByte">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntConstByte"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConstByte.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConstByte.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntConstByte.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceContext">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InterfaceContext"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceContext.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceContext.InterfaceValue">
            <summary>
            Interface value.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceContext.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceContext.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceToObjCast">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_InterfaceToObjCast"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceToObjCast.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceToObjCast.ClassPtr">
            <summary>
            The interface class to convert to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceToObjCast.Target">
            <summary>
            The target of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceToObjCast.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_InterfaceToObjCast.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntOne">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntOne"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntOne.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntOne.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntOne.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntZero">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_IntZero"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntZero.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntZero.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_IntZero.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Jump">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Jump"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Jump.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Jump.CodeOffset">
            <summary>
            The offset to jump to.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Jump.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Jump.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_JumpIfNot">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_JumpIfNot"/> instruction.
            Conditional equivalent of the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Jump"/> expression.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_JumpIfNot.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_JumpIfNot.CodeOffset">
            <summary>
            The offset to jump to if the provided expression evaluates to false.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_JumpIfNot.BooleanExpression">
            <summary>
            Expression to evaluate to determine whether or not a jump should be performed.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_JumpIfNot.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_JumpIfNot.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Let">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Let"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Let.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Let.Value">
            <summary>
            A pointer to the variable.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Let.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Let.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetBool">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetBool"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetBool.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetBool.VariableExpression">
            <summary>
            Variable expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetBool.AssignmentExpression">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetBool.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetBool.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetDelegate.VariableExpression">
            <summary>
            Variable expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetDelegate.AssignmentExpression">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetMulticastDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetMulticastDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetMulticastDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetMulticastDelegate.VariableExpression">
            <summary>
            Variable expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetMulticastDelegate.AssignmentExpression">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetMulticastDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetMulticastDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetObj">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetObj"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetObj.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetObj.VariableExpression">
            <summary>
            Variable expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetObj.AssignmentExpression">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetObj.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetObj.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetValueOnPersistentFrame">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetValueOnPersistentFrame"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetValueOnPersistentFrame.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetValueOnPersistentFrame.DestinationProperty">
            <summary>
            Destination property pointer.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetValueOnPersistentFrame.AssignmentExpression">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetValueOnPersistentFrame.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetValueOnPersistentFrame.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetWeakObjPtr">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LetWeakObjPtr"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetWeakObjPtr.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetWeakObjPtr.VariableExpression">
            <summary>
            Variable expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetWeakObjPtr.AssignmentExpression">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetWeakObjPtr.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LetWeakObjPtr.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalFinalFunction">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalFinalFunction"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalFinalFunction.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalFinalFunction.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalFinalFunction.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalOutVariable">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalOutVariable"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalOutVariable.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalOutVariable.Variable">
            <summary>
            A pointer to the variable in question.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalOutVariable.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalOutVariable.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVariable">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalVariable"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVariable.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVariable.Variable">
            <summary>
            A pointer to the variable in question.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVariable.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVariable.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVirtualFunction">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_LocalVirtualFunction"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVirtualFunction.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVirtualFunction.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_LocalVirtualFunction.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_MapConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_MapConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_MapConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_MapConst.KeyProperty">
            <summary>
            Pointer to this constant's key property (FProperty*).
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_MapConst.ValueProperty">
            <summary>
            Pointer to this constant's value property (FProperty*).
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_MapConst.Elements">
            <summary>
            Set constant entries.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_MapConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_MapConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_MetaCast">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_MetaCast"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_MetaCast.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_MetaCast.ClassPtr">
            <summary>
            A pointer to the relevant class (UClass*).
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_MetaCast.TargetExpression">
            <summary>
            The target expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_MetaCast.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_MetaCast.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_NameConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_NameConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_NameConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_NameConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_NameConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoInterface">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_NoInterface"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoInterface.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoInterface.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoInterface.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoObject">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_NoObject"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoObject.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoObject.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_NoObject.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Nothing">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Nothing"/> instruction.
            Represents a no-op.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Nothing.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Nothing.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Nothing.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjectConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ObjectConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjectConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjectConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjectConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjToInterfaceCast">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_ObjToInterfaceCast"/> instruction.
            A conversion from an object or interface variable to a native interface variable.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjToInterfaceCast.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjToInterfaceCast.ClassPtr">
            <summary>
            A pointer to the interface class to convert to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjToInterfaceCast.Target">
            <summary>
            The target of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjToInterfaceCast.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_ObjToInterfaceCast.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlow">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PopExecutionFlow"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlow.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlow.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlow.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlowIfNot">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PopExecutionFlowIfNot"/> instruction.
            Conditional equivalent of the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PopExecutionFlow"/> expression.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlowIfNot.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlowIfNot.BooleanExpression">
            <summary>
            Expression to evaluate to determine whether or not a pop should be performed.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlowIfNot.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PopExecutionFlowIfNot.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_PrimitiveCast">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PrimitiveCast"/> instruction.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_PrimitiveCast.ConversionType">
            <summary>
            The type to cast to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_PrimitiveCast.Target">
            <summary>
            The target of this expression.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_PrimitiveCast.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PrimitiveCast.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PrimitiveCast.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_PropertyConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PropertyConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_PropertyConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_PropertyConst.Property">
            <summary>
            A pointer to the property in question.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PropertyConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PropertyConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_PushExecutionFlow">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_PushExecutionFlow"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_PushExecutionFlow.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_PushExecutionFlow.PushingAddress">
            <summary>
            The address to push onto the execution flow stack.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PushExecutionFlow.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_PushExecutionFlow.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_RemoveMulticastDelegate">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_RemoveMulticastDelegate"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_RemoveMulticastDelegate.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_RemoveMulticastDelegate.Delegate">
            <summary>
            Delegate property to assign to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_RemoveMulticastDelegate.DelegateToAdd">
            <summary>
            Delegate to add to the MC delegate for broadcast.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_RemoveMulticastDelegate.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_RemoveMulticastDelegate.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Return">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Return"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Return.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Return.ReturnExpression">
            <summary>
            The return expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Return.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Return.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_RotationConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_RotationConst"/> instruction.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_RotationConst.Pitch">
            <summary>Rotation around the right axis (around Y axis), Looking up and down (0=Straight Ahead, +Up, -Down)</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_RotationConst.Yaw">
            <summary>Rotation around the up axis (around Z axis), Running in circles 0=East, +North, -South.</summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_RotationConst.Roll">
            <summary>Rotation around the forward axis (around X axis), Tilting your head, 0=Straight, +Clockwise, -CCW.</summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_RotationConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_RotationConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_RotationConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Self">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Self"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Self.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Self.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Self.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetArray">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SetArray"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetArray.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetArray.AssigningProperty">
            <summary>
            Array property to assign to
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetArray.ArrayInnerProp">
            <summary>
            Pointer to the array inner property (FProperty*).
            Only used in engine versions prior to <see cref="F:UAssetAPI.UE4Version.VER_UE4_CHANGE_SETARRAY_BYTECODE"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetArray.Elements">
            <summary>
            Array items.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetArray.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetArray.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SetConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetConst.InnerProperty">
            <summary>
            Pointer to this constant's inner property (FProperty*).
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetConst.Elements">
            <summary>
            Set constant entries.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetMap">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SetMap"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetMap.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetMap.MapProperty">
            <summary>
            Map property.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetMap.Elements">
            <summary>
            Set entries.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetMap.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetMap.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetSet">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SetSet"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetSet.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetSet.SetProperty">
            <summary>
            Set property.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetSet.Elements">
            <summary>
            Set entries.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetSet.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SetSet.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Skip">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Skip"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Skip.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Skip.CodeOffset">
            <summary>
            The offset to skip to.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_Skip.SkipExpression">
            <summary>
            An expression to possibly skip.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Skip.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Skip.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_SkipOffsetConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SkipOffsetConst"/> instruction.
            Represents a code offset constant.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_SkipOffsetConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SkipOffsetConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SkipOffsetConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_SoftObjectConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SoftObjectConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_SoftObjectConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SoftObjectConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SoftObjectConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_StringConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_StringConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_StringConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_StringConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_StringConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_StructConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructConst.Struct">
            <summary>
            Pointer to the UScriptStruct in question.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructConst.StructSize">
            <summary>
            The size of the struct that this constant represents in memory in bytes.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructMemberContext">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_StructMemberContext"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructMemberContext.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructMemberContext.StructMemberExpression">
            <summary>
            A pointer to the struct member expression (FProperty*).
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructMemberContext.StructExpression">
            <summary>
            Struct expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructMemberContext.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_StructMemberContext.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.FKismetSwitchCase">
            <summary>
            Represents a case in a Kismet bytecode switch statement.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.FKismetSwitchCase.CaseIndexValueTerm">
            <summary>
            The index value term of this case.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.FKismetSwitchCase.NextOffset">
            <summary>
            Code offset to the next case.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.FKismetSwitchCase.CaseTerm">
            <summary>
            The main case term.
            </summary>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_SwitchValue"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue.EndGotoOffset">
            <summary>
            Code offset to jump to when finished.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue.IndexTerm">
            <summary>
            The index term of this switch statement.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue.DefaultTerm">
            <summary>
            The default term of this switch statement.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue.Cases">
            <summary>
            All the cases in this switch statement.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_SwitchValue.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_TextConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_TextConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_TextConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_TextConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_TextConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_Tracepoint">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_Tracepoint"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_Tracepoint.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Tracepoint.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_Tracepoint.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_TransformConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_TransformConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_TransformConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_TransformConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_TransformConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_True">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_True"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_True.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_True.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_True.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_UInt64Const">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_UInt64Const"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_UInt64Const.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_UInt64Const.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_UInt64Const.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_UnicodeStringConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_UnicodeStringConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_UnicodeStringConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_UnicodeStringConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_UnicodeStringConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_VectorConst">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_VectorConst"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_VectorConst.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_VectorConst.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_VectorConst.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_VirtualFunction">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_VirtualFunction"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_VirtualFunction.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_VirtualFunction.VirtualFunctionName">
            <summary>
            Virtual function name.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.Expressions.EX_VirtualFunction.Parameters">
            <summary>
            List of parameters for this function.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_VirtualFunction.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_VirtualFunction.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.Expressions.EX_WireTracepoint">
            <summary>
            A single Kismet bytecode instruction, corresponding to the <see cref="F:UAssetAPI.Kismet.Bytecode.EExprToken.EX_WireTracepoint"/> instruction.
            </summary>
        </member>
        <member name="P:UAssetAPI.Kismet.Bytecode.Expressions.EX_WireTracepoint.Token">
            <summary>
            The token of this expression.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_WireTracepoint.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out the expression from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.Expressions.EX_WireTracepoint.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes the expression to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.Kismet.Bytecode.FScriptText">
            <summary>
            Represents an FText as serialized in Kismet bytecode.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.LocalizedSource">
            <summary>
            Source of this text if it is localized text. Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.InvariantText"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.LocalizedKey">
            <summary>
            Key of this text if it is localized text. Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.InvariantText"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.LocalizedNamespace">
            <summary>
            Namespace of this text if it is localized text. Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.InvariantText"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.InvariantLiteralString">
            <summary>
            Value of this text if it is an invariant string literal. Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.InvariantText"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.LiteralString">
            <summary>
            Value of this text if it is a string literal. Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.LiteralString"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.StringTableAsset">
            <summary>
            Pointer to this text's UStringTable. Not used at runtime, but exists for asset dependency gathering. Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.StringTableEntry"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.StringTableId">
            <summary>
            Table ID string literal (namespace). Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.StringTableEntry"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.Kismet.Bytecode.FScriptText.StringTableKey">
            <summary>
            String table key string literal. Used when <see cref="F:UAssetAPI.Kismet.Bytecode.FScriptText.TextLiteralType"/> is <see cref="F:UAssetAPI.Kismet.Bytecode.EBlueprintTextLiteralType.StringTableEntry"/>.
            </summary>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.FScriptText.Read(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads out an FBlueprintText from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="M:UAssetAPI.Kismet.Bytecode.FScriptText.Write(UAssetAPI.AssetBinaryWriter)">
            <summary>
            Writes an FBlueprintText to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <returns>The iCode offset of the data that was written.</returns>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.DoublePropertyData">
            <summary>
            Describes an IEEE 64-bit floating point variable (<see cref="T:System.Double"/>).
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.DoublePropertyData.Value">
            <summary>
            The double that this property represents.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.ArrayPropertyData">
            <summary>
            Describes an array.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.SetPropertyData">
            <summary>
            Describes a set.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.BoolPropertyData">
            <summary>
            Describes a boolean (<see cref="T:System.Boolean"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.BytePropertyData">
            <summary>
            Describes a byte or an enumeration value.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.UnknownPropertyData">
            <summary>
            Describes a property which UAssetAPI has no specific serialization for, and is instead represented as an array of bytes as a fallback.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.EnumPropertyData">
            <summary>
            Describes an enumeration value.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.FloatPropertyData">
            <summary>
            Describes an IEEE 32-bit floating point variable (<see cref="T:System.Single"/>).
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.FloatPropertyData.Value">
            <summary>
            The float that this property represents.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.Int16PropertyData">
            <summary>
            Describes a 16-bit signed integer variable (<see cref="T:System.Int16"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.Int64PropertyData">
            <summary>
            Describes a 64-bit signed integer variable (<see cref="T:System.Int64"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.Int8PropertyData">
            <summary>
            Describes an 8-bit signed integer variable (<see cref="T:System.SByte"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.IntPropertyData">
            <summary>
            Describes a 32-bit signed integer variable (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.MapPropertyData">
            <summary>
            Describes a map (<see cref="T:System.Collections.Specialized.OrderedDictionary"/>).
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.MapPropertyData.Value">
            <summary>
            The map that this property represents.
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.MapPropertyData.KeyType">
            <summary>
            Used when the length of the map is zero.
            </summary>]
        </member>
        <member name="F:UAssetAPI.PropertyTypes.MapPropertyData.ValueType">
            <summary>
            Used when the length of the map is zero.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.FMulticastDelegate">
            <summary>
            Describes a function bound to an Object.
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.FMulticastDelegate.Number">
            Uncertain what this is for; if you find out, please let me know 
        </member>
        <member name="F:UAssetAPI.PropertyTypes.FMulticastDelegate.Delegate">
            Uncertain what this is for; if you find out, please let me know 
        </member>
        <member name="T:UAssetAPI.PropertyTypes.MulticastDelegatePropertyData">
            <summary>
            Describes a list of functions bound to an Object.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.NamePropertyData">
            <summary>
            Describes an <see cref="T:UAssetAPI.FName"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.ObjectPropertyData">
            <summary>
            Describes a reference variable to another object (import/export) which may be null (<see cref="T:UAssetAPI.FPackageIndex"/>).
            </summary>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.ObjectPropertyData.IsImport">
            <summary>
            Returns true if this ObjectProperty represents an import.
            </summary>
            <returns>Is this ObjectProperty an import?</returns>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.ObjectPropertyData.IsExport">
            <summary>
            Returns true if this ObjectProperty represents an export.
            </summary>
            <returns>Is this ObjectProperty an export?</returns>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.ObjectPropertyData.IsNull">
            <summary>
            Return true if this ObjectProperty represents null (i.e. neither an import nor an export)
            </summary>
            <returns>Does this ObjectProperty represent null?</returns>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.ObjectPropertyData.ToImport(UAssetAPI.UAsset)">
            <summary>
            Check that this ObjectProperty is an import index and return the corresponding import.
            </summary>
            <returns>The import that this ObjectProperty represents in the import map.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when this is not an index into the import map.</exception>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.ObjectPropertyData.ToExport(UAssetAPI.UAsset)">
            <summary>
            Check that this ObjectProperty is an export index and return the corresponding export.
            </summary>
            <returns>The export that this ObjectProperty represents in the the export map.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when this is not an index into the export map.</exception>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.PropertyData">
            <summary>
            Generic Unreal property class.
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.PropertyData.Name">
            <summary>
            The name of this property.
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.PropertyData.DuplicationIndex">
            <summary>
            The duplication index of this property. Used to distinguish properties with the same name in the same struct.
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.PropertyData.Offset">
            <summary>
            The offset of this property on disk. This is for the user only, and has no bearing in the API itself.
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.PropertyData.Tag">
            <summary>
            An optional tag which can be set on any property in memory. This is for the user only, and has no bearing in the API itself.
            </summary>
        </member>
        <member name="P:UAssetAPI.PropertyTypes.PropertyData.ShouldBeRegistered">
            <summary>
            Determines whether or not this particular property should be registered in the property registry and automatically used when parsing assets.
            </summary>
        </member>
        <member name="P:UAssetAPI.PropertyTypes.PropertyData.HasCustomStructSerialization">
            <summary>
            Determines whether or not this particular property has custom serialization within a StructProperty.
            </summary>
        </member>
        <member name="P:UAssetAPI.PropertyTypes.PropertyData.PropertyType">
            <summary>
            The type of this property as an FName.
            </summary>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.PropertyData.Read(UAssetAPI.AssetBinaryReader,System.Boolean,System.Int64,System.Int64)">
            <summary>
            Reads out a property from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
            <param name="includeHeader">Whether or not to also read the "header" of the property, which is data considered by the Unreal Engine to be data that is part of the PropertyData base class rather than any particular child class.</param>
            <param name="leng1">An estimate for the length of the data being read out.</param>
            <param name="leng2">A second estimate for the length of the data being read out.</param>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.PropertyData.Write(UAssetAPI.AssetBinaryWriter,System.Boolean)">
            <summary>
            Writes a property to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write from.</param>
            <param name="includeHeader">Whether or not to also write the "header" of the property, which is data considered by the Unreal Engine to be data that is part of the PropertyData base class rather than any particular child class.</param>
            <returns>The length in bytes of the data that was written.</returns>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.PropertyData.FromString(System.String[],UAssetAPI.UAsset)">
            <summary>
            Sets certain fields of the property based off of an array of strings.
            </summary>
            <param name="d">An array of strings to derive certain fields from.</param>
            <param name="asset">The asset that the property belongs to.</param>
        </member>
        <member name="M:UAssetAPI.PropertyTypes.PropertyData.Clone">
            <summary>
            Performs a deep clone of the current PropertyData instance.
            </summary>
            <returns>A deep copy of the current property.</returns>
        </member>
        <member name="P:UAssetAPI.PropertyTypes.PropertyData`1.Value">
            <summary>
            The main value of this property, if such a concept is applicable to the property in question. Properties may contain other values as well, in which case they will be present as other fields in the child class.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.AssetObjectPropertyData">
            <summary>
            Describes a reference variable to another object which may be null, and may become valid or invalid at any point. Synonym for <see cref="T:UAssetAPI.PropertyTypes.SoftObjectPropertyData"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.SoftObjectPropertyData">
            <summary>
            Describes a reference variable to another object which may be null, and may become valid or invalid at any point. Synonym for <see cref="T:UAssetAPI.PropertyTypes.AssetObjectPropertyData"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.StrPropertyData">
            <summary>
            Describes an <see cref="T:UAssetAPI.FString"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.TextPropertyData">
            <summary>
            Describes an FText.
            </summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.TextPropertyData.Flags">
            <summary>Flags with various information on what sort of FText this is</summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.TextPropertyData.HistoryType">
            <summary>The HistoryType of this FText.</summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.TextPropertyData.TableId">
            <summary>The string table ID being referenced, if applicable</summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.TextPropertyData.Namespace">
            <summary>A namespace to use when parsing texts that use LOCTEXT</summary>
        </member>
        <member name="F:UAssetAPI.PropertyTypes.TextPropertyData.CultureInvariantString">
            <summary>The source string for this FText. In the Unreal Engine, this is also known as SourceString.</summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.UInt16PropertyData">
            <summary>
            Describes a 16-bit unsigned integer variable (<see cref="T:System.UInt16"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.UInt32PropertyData">
            <summary>
            Describes a 32-bit unsigned integer variable (<see cref="T:System.UInt32"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.PropertyTypes.UInt64PropertyData">
            <summary>
            Describes a 64-bit unsigned integer variable (<see cref="T:System.UInt64"/>).
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.SmartNamePropertyData">
            <summary>
            Special FName struct used within animations.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.SmartNamePropertyData.DisplayName">
            <summary>
            The display name of this FSmartName.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.SmartNamePropertyData.SmartNameID">
            <summary>
            SmartName::UID_Type - for faster access
            </summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.SmartNamePropertyData.TempGUID">
            <summary>
            Uncertain
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.SoftObjectPathPropertyData">
            <summary>
            A struct that contains a string reference to an object, either a top level asset or a subobject.
            This can be used to make soft references to assets that are loaded on demand.
            This is stored internally as an FName pointing to the top level asset (/package/path.assetname) and an option a string subobject path.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.SoftObjectPathPropertyData.AssetPathName">
            <summary>Asset path, patch to a top level object in a package. This is /package/path.assetname</summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.SoftObjectPathPropertyData.SubPathString">
            <summary>Optional FString for subobject within an asset. This is the sub path after the :</summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.SoftObjectPathPropertyData.Path">
            <summary>Used in older versions of the Unreal Engine.</summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.SoftClassPathPropertyData">
            <summary>
            A struct that contains a string reference to a class. Can be used to make soft references to classes.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.ColorPropertyData">
            <summary>
            Describes a color with 8 bits of precision per channel.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.PerPlatformBoolPropertyData">
            <summary>
            <see cref="T:UAssetAPI.PropertyTypes.BoolPropertyData"/> (<see cref="T:System.Boolean"/>) property with per-platform overrides.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.PerPlatformIntPropertyData">
            <summary>
            <see cref="T:UAssetAPI.PropertyTypes.IntPropertyData"/> (<see cref="T:System.Int32"/>) property with per-platform overrides.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.TimespanPropertyData">
            <summary>
            Implements a time span.
            A time span is the difference between two dates and times. For example, the time span between
            12:00:00 January 1, 2000 and 18:00:00 January 2, 2000 is 30.0 hours. Time spans are measured in
            positive or negative ticks depending on whether the difference is measured forward or backward.
            Each tick has a resolution of 0.1 microseconds (= 100 nanoseconds).
            
            In conjunction with the companion class <see cref="T:UAssetAPI.StructTypes.DateTimePropertyData"/> (<see cref="T:System.DateTime"/>),
            time spans can be used to perform date and time based arithmetic, such as calculating the
            difference between two dates or adding a certain amount of time to a given date.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.DateTimePropertyData">
             <summary>
             Implements a date and time.
            
             Values of this type represent dates and times between Midnight 00:00:00, January 1, 0001 and
             Midnight 23:59:59.9999999, December 31, 9999 in the Gregorian calendar. Internally, the time
             values are stored in ticks of 0.1 microseconds (= 100 nanoseconds) since January 1, 0001.
            
             The companion class <see cref="T:UAssetAPI.StructTypes.TimespanPropertyData"/> (<see cref="T:System.TimeSpan"/>) is provided for
             enabling date and time based arithmetic, such as calculating the difference between two dates
             or adding a certain amount of time to a given date.
             </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.GuidPropertyData">
            <summary>
            Describes a 128-bit <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.LinearColor">
            <summary>
            A linear, 32-bit/component floating point RGBA color.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.QuatPropertyData">
            <summary>
            Floating point quaternion that can represent a rotation about an axis in 3-D space.
            The X, Y, Z, W components also double as the Axis/Angle format.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.RotatorPropertyData">
            <summary>
            Implements a container for rotation information.
            All rotation values are stored in degrees.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.Vector2DPropertyData">
            <summary>
            A vector in 2-D space composed of components (X, Y) with floating point precision.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.Vector2DPropertyData.X">
            <summary>Vector's X-component.</summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.Vector2DPropertyData.Y">
            <summary>Vector's Y-component.</summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.PerPlatformFloatPropertyData">
            <summary>
            <see cref="T:UAssetAPI.PropertyTypes.FloatPropertyData"/> (<see cref="T:System.Single"/>) property with per-platform overrides.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.Vector4PropertyData">
            <summary>
            A 4D homogeneous vector, 4x1 FLOATs, 16-byte aligned.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.Vector4PropertyData.X">
            <summary>Vector's X-component.</summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.Vector4PropertyData.Y">
            <summary>Vector's Y-component.</summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.Vector4PropertyData.Z">
            <summary>Vector's Z-component.</summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.Vector4PropertyData.W">
            <summary>Vector's W-component.</summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.VectorPropertyData">
            <summary>
            A vector in 3-D space composed of components (X, Y, Z) with floating point precision.
            </summary>
        </member>
        <member name="T:UAssetAPI.StructTypes.ViewTargetBlendFunction">
            <summary>
            Options that define how to blend when changing view targets in <see cref="T:UAssetAPI.StructTypes.ViewTargetBlendParamsPropertyData"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.StructTypes.ViewTargetBlendFunction.VTBlend_Linear">
            Camera does a simple linear interpolation. 
        </member>
        <member name="F:UAssetAPI.StructTypes.ViewTargetBlendFunction.VTBlend_Cubic">
            Camera has a slight ease in and ease out, but amount of ease cannot be tweaked. 
        </member>
        <member name="F:UAssetAPI.StructTypes.ViewTargetBlendFunction.VTBlend_EaseIn">
            Camera immediately accelerates, but smoothly decelerates into the target.  Ease amount controlled by BlendExp. 
        </member>
        <member name="F:UAssetAPI.StructTypes.ViewTargetBlendFunction.VTBlend_EaseOut">
            Camera smoothly accelerates, but does not decelerate into the target.  Ease amount controlled by BlendExp. 
        </member>
        <member name="F:UAssetAPI.StructTypes.ViewTargetBlendFunction.VTBlend_EaseInOut">
            Camera smoothly accelerates and decelerates.  Ease amount controlled by BlendExp. 
        </member>
        <member name="T:UAssetAPI.StructTypes.ViewTargetBlendParamsPropertyData">
            <summary>
            A set of parameters to describe how to transition between view targets.
            Referred to as FViewTargetTransitionParams in the Unreal Engine.
            </summary>
        </member>
        <member name="M:UAssetAPI.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Provides a more natural way to call String.Format() on a string.
            </summary>
            <param name="s">The string to format.</param>
            <param name="args">An object array that contains zero or more objects to format</param>
        </member>
        <member name="M:UAssetAPI.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Provides a more natural way to call String.Format() on a string.
            </summary>
            <param name="s">The string to format.</param>
            <param name="provider">An object that supplies the culture specific formatting</param>
            <param name="args">An object array that contains zero or more objects to format</param>
        </member>
        <member name="T:UAssetAPI.KeyedCollection2`2">
            <summary>
            A concrete implementation of the abstract KeyedCollection class using lambdas for the
            implementation.
            </summary>
        </member>
        <member name="T:UAssetAPI.TMap`2">
            <summary>
            A dictionary object that allows rapid hash lookups using keys, but also
            maintains the key insertion order so that values can be retrieved by
            key index.
            </summary>
        </member>
        <member name="P:UAssetAPI.TMap`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get or set.</param>
        </member>
        <member name="P:UAssetAPI.TMap`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The index of the value to get or set.</param>
        </member>
        <member name="P:UAssetAPI.TMap`2.Count">
            <summary>
            Gets the number of items in the dictionary
            </summary>
        </member>
        <member name="P:UAssetAPI.TMap`2.Keys">
            <summary>
            Gets all the keys in the ordered dictionary in their proper order.
            </summary>
        </member>
        <member name="P:UAssetAPI.TMap`2.Values">
            <summary>
            Gets all the values in the ordered dictionary in their proper order.
            </summary>
        </member>
        <member name="P:UAssetAPI.TMap`2.Comparer">
            <summary>
            Gets the key comparer for this dictionary
            </summary>
        </member>
        <member name="M:UAssetAPI.TMap`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.  The value can be null for reference types.</param>
        </member>
        <member name="M:UAssetAPI.TMap`2.Clear">
            <summary>
            Removes all keys and values from this object.
            </summary>
        </member>
        <member name="M:UAssetAPI.TMap`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new key-value pair at the index specified.
            </summary>
            <param name="index">The insertion index.  This value must be between 0 and the count of items in this object.</param>
            <param name="key">A unique key for the element to add</param>
            <param name="value">The value of the element to add.  Can be null for reference types.</param>
        </member>
        <member name="M:UAssetAPI.TMap`2.IndexOf(`0)">
            <summary>
            Gets the index of the key specified.
            </summary>
            <param name="key">The key whose index will be located</param>
            <returns>Returns the index of the key specified if found.  Returns -1 if the key could not be located.</returns>
        </member>
        <member name="M:UAssetAPI.TMap`2.ContainsValue(`1)">
            <summary>
            Determines whether this object contains the specified value.
            </summary>
            <param name="value">The value to locate in this object.</param>
            <returns>True if the value is found.  False otherwise.</returns>
        </member>
        <member name="M:UAssetAPI.TMap`2.ContainsValue(`1,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Determines whether this object contains the specified value.
            </summary>
            <param name="value">The value to locate in this object.</param>
            <param name="comparer">The equality comparer used to locate the specified value in this object.</param>
            <returns>True if the value is found.  False otherwise.</returns>
        </member>
        <member name="M:UAssetAPI.TMap`2.ContainsKey(`0)">
            <summary>
            Determines whether this object contains the specified key.
            </summary>
            <param name="key">The key to locate in this object.</param>
            <returns>True if the key is found.  False otherwise.</returns>
        </member>
        <member name="M:UAssetAPI.TMap`2.GetItem(System.Int32)">
            <summary>
            Returns the KeyValuePair at the index specified.
            </summary>
            <param name="index">The index of the KeyValuePair desired</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:UAssetAPI.TMap`2.SetItem(System.Int32,`1)">
            <summary>
            Sets the value at the index specified.
            </summary>
            <param name="index">The index of the value desired</param>
            <param name="value">The value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the index specified does not refer to a KeyValuePair in this object
            </exception>
        </member>
        <member name="M:UAssetAPI.TMap`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through all the KeyValuePairs in this object.
            </summary>
        </member>
        <member name="M:UAssetAPI.TMap`2.Remove(`0)">
            <summary>
            Removes the key-value pair for the specified key.
            </summary>
            <param name="key">The key to remove from the dictionary.</param>
            <returns>True if the item specified existed and the removal was successful.  False otherwise.</returns>
        </member>
        <member name="M:UAssetAPI.TMap`2.RemoveAt(System.Int32)">
            <summary>
            Removes the key-value pair at the specified index.
            </summary>
            <param name="index">The index of the key-value pair to remove from the dictionary.</param>
        </member>
        <member name="M:UAssetAPI.TMap`2.GetValue(`0)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to get.</param>
        </member>
        <member name="M:UAssetAPI.TMap`2.SetValue(`0,`1)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key associated with the value to set.</param>
            <param name="value">The the value to set.</param>
        </member>
        <member name="M:UAssetAPI.TMap`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the specified key.
            </summary>
            <param name="key">The key of the desired element.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified key if
            that key was found.  Otherwise it will contain the default value for parameter's type.
            This parameter should be provided uninitialized.
            </param>
            <returns>True if the value was found.  False otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="T:UAssetAPI.FEngineVersion">
            <summary>
            Holds basic Unreal version numbers.
            </summary>
        </member>
        <member name="F:UAssetAPI.FEngineVersion.Major">
            <summary>Major version number.</summary>
        </member>
        <member name="F:UAssetAPI.FEngineVersion.Minor">
            <summary>Minor version number.</summary>
        </member>
        <member name="F:UAssetAPI.FEngineVersion.Patch">
            <summary>Patch version number.</summary>
        </member>
        <member name="F:UAssetAPI.FEngineVersion.Changelist">
            <summary>Changelist number. This is used by the engine to arbitrate when Major/Minor/Patch version numbers match.</summary>
        </member>
        <member name="F:UAssetAPI.FEngineVersion.Branch">
            <summary>Branch name.</summary>
        </member>
        <member name="T:UAssetAPI.FGenerationInfo">
            <summary>
            Revision data for an Unreal package file.
            </summary>
        </member>
        <member name="F:UAssetAPI.FGenerationInfo.ExportCount">
            <summary>Number of exports in the export map for this generation.</summary>
        </member>
        <member name="F:UAssetAPI.FGenerationInfo.NameCount">
            <summary>Number of names in the name map for this generation.</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.Info">
            <summary>
            Agent string to provide context in serialized JSON.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.FilePath">
            <summary>
            The path of the file on disk that this asset represents. This does not need to be specified for regular parsing.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.UseSeparateBulkDataFiles">
            <summary>
            Should the asset be split into separate .uasset, .uexp, and .ubulk files, as opposed to one single .uasset file?
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.EngineVersion">
            <summary>
            The version of the Unreal Engine that will be used to parse this asset.
            </summary>
        </member>
        <member name="M:UAssetAPI.UAsset.VerifyBinaryEquality">
            <summary>
            Checks whether or not this asset maintains binary equality when serialized.
            </summary>
            <returns>Whether or not the asset maintained binary equality.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.GetNameMapIndexList">
            <summary>
            Returns the name map as a read-only list of FStrings.
            </summary>
            <returns>The name map as a read-only list of FStrings.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.ClearNameIndexList">
            <summary>
            Clears the name map. This method should be used with extreme caution, as it may break unparsed references to the name map.
            </summary>
        </member>
        <member name="M:UAssetAPI.UAsset.SetNameReference(System.Int32,UAssetAPI.FString)">
            <summary>
            Replaces a value in the name map at a particular index.
            </summary>
            <param name="index">The index to overwrite in the name map.</param>
            <param name="value">The value that will be replaced in the name map.</param>
        </member>
        <member name="M:UAssetAPI.UAsset.GetNameReference(System.Int32)">
            <summary>
            Gets a value in the name map at a particular index.
            </summary>
            <param name="index">The index to return the value at.</param>
            <returns>The value at the index provided.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.GetNameReferenceWithoutZero(System.Int32)">
            <summary>
            Gets a value in the name map at a particular index, but with the index zero being treated as if it is not valid.
            </summary>
            <param name="index">The index to return the value at.</param>
            <returns>The value at the index provided.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.NameReferenceContains(UAssetAPI.FString)">
            <summary>
            Checks whether or not the value exists in the name map.
            </summary>
            <param name="search">The value to search the name map for.</param>
            <returns>true if the value appears in the name map, otherwise false.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.SearchNameReference(UAssetAPI.FString)">
            <summary>
            Searches the name map for a particular value.
            </summary>
            <param name="search">The value to search the name map for.</param>
            <returns>The index at which the value appears in the name map.</returns>
            <exception cref="T:UAssetAPI.NameMapOutOfRangeException">Thrown when the value provided does not appear in the name map.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.AddNameReference(UAssetAPI.FString,System.Boolean)">
            <summary>
            Adds a new value to the name map.
            </summary>
            <param name="name">The value to add to the name map.</param>
            <param name="forceAddDuplicates">Whether or not to add a new entry if the value provided already exists in the name map.</param>
            <returns>The index of the new value in the name map. If the value already existed in the name map beforehand, that index will be returned instead.</returns>
            <exception cref="T:System.ArgumentException">Thrown when forceAddDuplicates is false and the value provided is null or empty.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.AddImport(UAssetAPI.Import)">
            <summary>
            Adds a new import to the import map. This is equivalent to adding directly to the <see cref="F:UAssetAPI.UAsset.Imports"/> list.
            </summary>
            <param name="li">The new import to add to the import map.</param>
            <returns>The FPackageIndex corresponding to the newly-added import.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.GetClassExport">
            <summary>
            Searches for and returns this asset's ClassExport, if one exists.
            </summary>
            <returns>The asset's ClassExport if one exists, otherwise null.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.GetParentClass(UAssetAPI.FName@,UAssetAPI.FName@)">
            <summary>
            Finds the class path and export name of the SuperStruct of this asset, if it exists.
            </summary>
            <param name="parentClassPath">The class path of the SuperStruct of this asset, if it exists.</param>
            <param name="parentClassExportName">The export name of the SuperStruct of this asset, if it exists.</param>
        </member>
        <member name="M:UAssetAPI.UAsset.GetCustomVersion(System.Guid)">
            <summary>
            Fetches the version of a custom version in this asset.
            </summary>
            <param name="key">The GUID of the custom version to retrieve.</param>
            <returns>The version of the retrieved custom version.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.GetCustomVersion(System.String)">
            <summary>
            Fetches the version of a custom version in this asset.
            </summary>
            <param name="friendlyName">The friendly name of the custom version to retrieve.</param>
            <returns>The version of the retrieved custom version.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.GetCustomVersion``1">
            <summary>
            Fetches a custom version's enum value based off of its type.
            </summary>
            <typeparam name="T">The enum type of the custom version to retrieve.</typeparam>
            <returns>The enum value of the requested custom version.</returns>
            <exception cref="T:System.ArgumentException">Thrown when T is not an enumerated type.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.SearchForImport(UAssetAPI.FName,UAssetAPI.FName,UAssetAPI.FPackageIndex,UAssetAPI.FName)">
            <summary>
            Searches for an import in the import map based off of certain parameters.
            </summary>
            <param name="classPackage">The ClassPackage that the requested import will have.</param>
            <param name="className">The ClassName that the requested import will have.</param>
            <param name="outerIndex">The CuterIndex that the requested import will have.</param>
            <param name="objectName">The ObjectName that the requested import will have.</param>
            <returns>The index of the requested import in the name map, or zero if one could not be found.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.SearchForImport(UAssetAPI.FName,UAssetAPI.FName,UAssetAPI.FName)">
            <summary>
            Searches for an import in the import map based off of certain parameters.
            </summary>
            <param name="classPackage">The ClassPackage that the requested import will have.</param>
            <param name="className">The ClassName that the requested import will have.</param>
            <param name="objectName">The ObjectName that the requested import will have.</param>
            <returns>The index of the requested import in the name map, or zero if one could not be found.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.SearchForImport(UAssetAPI.FName)">
            <summary>
            Searches for an import in the import map based off of certain parameters.
            </summary>
            <param name="objectName">The ObjectName that the requested import will have.</param>
            <returns>The index of the requested import in the name map, or zero if one could not be found.</returns>
        </member>
        <member name="F:UAssetAPI.UAsset.LegacyFileVersion">
            <summary>
            The package file version number when this package was saved.
            </summary>
            <remarks>
                The lower 16 bits stores the UE3 engine version, while the upper 16 bits stores the UE4/licensee version. For newer packages this is -7.
                <list type="table">
                    <listheader>
                        <version>Version</version>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <version>-2</version>
                        <description>indicates presence of enum-based custom versions</description>
                    </item>
                    <item>
                        <version>-3</version>
                        <description>indicates guid-based custom versions</description>
                    </item>
                    <item>
                        <version>-4</version>
                        <description>indicates removal of the UE3 version. Packages saved with this ID cannot be loaded in older engine versions</description>
                    </item>
                    <item>
                        <version>-5</version>
                        <description>indicates the replacement of writing out the "UE3 version" so older versions of engine can gracefully fail to open newer packages</description>
                    </item>
                    <item>
                        <version>-6</version>
                        <description>indicates optimizations to how custom versions are being serialized</description>
                    </item>
                    <item>
                        <version>-7</version>
                        <description>indicates the texture allocation info has been removed from the summary</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="F:UAssetAPI.UAsset.IsUnversioned">
            <summary>
            Should this asset not serialize its engine and custom versions?
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.FileVersionLicenseeUE4">
            <summary>
            The licensee file version. Used by some games to add their own Engine-level versioning.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.CustomVersionContainer">
            <summary>
            All the custom versions stored in the archive.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.Imports">
            <summary>
            Map of object imports. UAssetAPI used to call these "links."
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.Exports">
            <summary>
            Map of object exports. UAssetAPI used to call these "categories."
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.DependsMap">
            <summary>
            List of dependency lists for each export.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.SoftPackageReferenceList">
            <summary>
            List of packages that are soft referenced by this package.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.AssetRegistryData">
            <summary>
            Uncertain
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.WorldTileInfo">
            <summary>
            Tile information used by WorldComposition.
            Defines properties necessary for tile positioning in the world.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.PreloadDependencies">
            <summary>
            List of imports and exports that must be serialized before other exports...all packed together, see <see cref="F:UAssetAPI.Export.FirstExportDependency"/>.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.Generations">
            <summary>
            Data about previous versions of this package.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.PackageGuid">
            <summary>
            Current ID for this package. Effectively unused.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.RecordedEngineVersion">
            <summary>
            Engine version this package was saved with. This may differ from CompatibleWithEngineVersion for assets saved with a hotfix release.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.RecordedCompatibleWithEngineVersion">
            <summary>
            Engine version this package is compatible with. Assets saved by Hotfix releases and engine versions that maintain binary compatibility will have
            a CompatibleWithEngineVersion.Patch that matches the original release (as opposed to SavedByEngineVersion which will have a patch version of the new release).
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.ChunkIDs">
            <summary>
            Streaming install ChunkIDs
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.PackageFlags">
            <summary>
            The flags for this package.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.PackageSource">
            <summary>
            Value that is used by the Unreal Engine to determine if the package was saved by Epic, a licensee, modder, etc.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.FolderName">
            <summary>
            The Generic Browser folder name that this package lives in. Usually "None" in cooked assets.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.MapStructTypeOverride">
            <summary>
            In MapProperties that have StructProperties as their keys or values, there is no universal, context-free way to determine the type of the struct. To that end, this dictionary maps MapProperty names to the type of the structs within them (tuple of key struct type and value struct type) if they are not None-terminated property lists.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.OverrideNameMapHashes">
            <summary>
            External programs often improperly specify name map hashes, so in this map we can preserve those changes to avoid confusion.
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.SectionSixOffset">
            <summary>This is called "TotalHeaderSize" in UE4 where header refers to the whole summary, whereas in UAssetAPI "header" refers to just the data before the start of the name map</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.NameCount">
            <summary>Number of names used in this package</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.NameOffset">
            <summary>Location into the file on disk for the name data</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.GatherableTextDataCount">
            <summary>Number of gatherable text data items in this package</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.GatherableTextDataOffset">
            <summary>Location into the file on disk for the gatherable text data items</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.ExportCount">
            <summary>Number of exports contained in this package</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.ExportOffset">
            <summary>Location into the file on disk for the "Export Details" data</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.ImportCount">
            <summary>Number of imports contained in this package</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.ImportOffset">
            <summary>Location into the file on disk for the ImportMap data</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.DependsOffset">
            <summary>Location into the file on disk for the DependsMap data</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.SoftPackageReferencesCount">
            <summary>Number of soft package references contained in this package</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.SoftPackageReferencesOffset">
            <summary>Location into the file on disk for the soft package reference list</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.SearchableNamesOffset">
            <summary>Location into the file on disk for the SearchableNamesMap data</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.ThumbnailTableOffset">
            <summary>Thumbnail table offset</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.CompressionFlags">
            <summary>Should be zero</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.AssetRegistryDataOffset">
            <summary>Location into the file on disk for the asset registry tag data</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.BulkDataStartOffset">
            <summary>Offset to the location in the file where the bulkdata starts</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.WorldTileInfoDataOffset">
            <summary>Offset to the location in the file where the FWorldTileInfo data start</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.PreloadDependencyCount">
            <summary>Number of preload dependencies contained in this package</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.PreloadDependencyOffset">
            <summary>Location into the file on disk for the preload dependency data</summary>
        </member>
        <member name="F:UAssetAPI.UAsset.nameMapIndexList">
            <summary>
            Internal list of name map entries. Do not directly add values to here under any circumstances; use <see cref="M:UAssetAPI.UAsset.AddNameReference(UAssetAPI.FString,System.Boolean)"/> instead
            </summary>
        </member>
        <member name="F:UAssetAPI.UAsset.nameMapLookup">
            <summary>
            Internal lookup for name map entries. Do not directly add values to here under any circumstances; use <see cref="M:UAssetAPI.UAsset.AddNameReference(UAssetAPI.FString,System.Boolean)"/> instead
            </summary>
        </member>
        <member name="M:UAssetAPI.UAsset.CopySplitUp(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Copies a portion of a stream to another stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
            <param name="start">The offset in the input stream to start copying from.</param>
            <param name="leng">The length in bytes of the data to be copied.</param>
        </member>
        <member name="F:UAssetAPI.UAsset.UASSET_MAGIC">
            <summary>
            Magic number for the .uasset format
            </summary>
        </member>
        <member name="M:UAssetAPI.UAsset.ReadHeader(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads the initial portion of the asset (everything before the name map).
            </summary>
            <param name="reader"></param>
            <exception cref="T:UAssetAPI.UnknownEngineVersionException">Thrown when this is an unversioned asset and <see cref="F:UAssetAPI.UAsset.EngineVersion"/> is unspecified.</exception>
            <exception cref="T:System.FormatException">Throw when the asset cannot be parsed correctly.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.Read(UAssetAPI.AssetBinaryReader,System.Int32[],System.Int32[])">
            <summary>
            Reads an asset into memory.
            </summary>
            <param name="reader">The input reader.</param>
            <param name="manualSkips">An array of export indexes to skip parsing. For most applications, this should be left blank.</param>
            <param name="forceReads">An array of export indexes that must be read, overriding entries in the manualSkips parameter. For most applications, this should be left blank.</param>
            <exception cref="T:UAssetAPI.UnknownEngineVersionException">Thrown when this is an unversioned asset and <see cref="F:UAssetAPI.UAsset.EngineVersion"/> is unspecified.</exception>
            <exception cref="T:System.FormatException">Throw when the asset cannot be parsed correctly.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.MakeHeader">
            <summary>
            Serializes the initial portion of the asset from memory.
            </summary>
            <returns>A byte array which represents the serialized binary data of the initial portion of the asset.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.WriteData">
            <summary>
            Serializes an asset from memory.
            </summary>
            <returns>A stream that the asset has been serialized to.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.PathToStream(System.String)">
            <summary>
            Creates a MemoryStream from an asset path.
            </summary>
            <param name="p">The path to the input file.</param>
            <returns>A new MemoryStream that stores the binary data of the input file.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.PathToReader(System.String)">
            <summary>
            Creates a BinaryReader from an asset path.
            </summary>
            <param name="p">The path to the input file.</param>
            <returns>A new BinaryReader that stores the binary data of the input file.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.Write(System.String)">
            <summary>
            Serializes and writes an asset to disk from memory.
            </summary>
            <param name="outputPath">The path on disk to write the asset to.</param>
            <exception cref="T:UAssetAPI.UnknownEngineVersionException">Thrown when <see cref="F:UAssetAPI.UAsset.EngineVersion"/> is unspecified.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.SerializeJson(Newtonsoft.Json.Formatting)">
            <summary>
            Serializes this asset as JSON.
            </summary>
            <param name="jsonFormatting">The formatting to use for the returned JSON string.</param>
            <returns>A serialized JSON string that represents the asset.</returns>
        </member>
        <member name="M:UAssetAPI.UAsset.DeserializeJson(System.String)">
            <summary>
            Reads an asset from serialized JSON and initializes a new instance of the <see cref="T:UAssetAPI.UAsset"/> class to store its data in memory.
            </summary>
            <param name="json">A serialized JSON string to parse.</param>
        </member>
        <member name="M:UAssetAPI.UAsset.DeserializeJson(System.IO.Stream)">
            <summary>
            Reads an asset from serialized JSON and initializes a new instance of the <see cref="T:UAssetAPI.UAsset"/> class to store its data in memory.
            </summary>
            <param name="stream">A stream containing serialized JSON string to parse.</param>
        </member>
        <member name="M:UAssetAPI.UAsset.#ctor(System.String,UAssetAPI.UE4Version,System.Collections.Generic.List{UAssetAPI.CustomVersion})">
            <summary>
            Reads an asset from disk and initializes a new instance of the <see cref="T:UAssetAPI.UAsset"/> class to store its data in memory.
            </summary>
            <param name="path">The path of the asset file on disk that this instance will read from.</param>
            <param name="engineVersion">The version of the Unreal Engine that will be used to parse this asset. If the asset is versioned, this can be left unspecified.</param>
            <param name="defaultCustomVersionContainer">A list of custom versions to parse this asset with. A list of custom versions will automatically be derived from the engine version while parsing if necessary, but you may manually specify them anyways if you wish. If the asset is versioned, this can be left unspecified.</param>
            <exception cref="T:UAssetAPI.UnknownEngineVersionException">Thrown when this is an unversioned asset and <see cref="F:UAssetAPI.UAsset.EngineVersion"/> is unspecified.</exception>
            <exception cref="T:System.FormatException">Throw when the asset cannot be parsed correctly.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.#ctor(UAssetAPI.AssetBinaryReader,UAssetAPI.UE4Version,System.Collections.Generic.List{UAssetAPI.CustomVersion})">
            <summary>
            Reads an asset from a BinaryReader and initializes a new instance of the <see cref="T:UAssetAPI.UAsset"/> class to store its data in memory.
            </summary>
            <param name="reader">The asset's BinaryReader that this instance will read from.</param>
            <param name="engineVersion">The version of the Unreal Engine that will be used to parse this asset. If the asset is versioned, this can be left unspecified.</param>
            <param name="defaultCustomVersionContainer">A list of custom versions to parse this asset with. A list of custom versions will automatically be derived from the engine version while parsing if necessary, but you may manually specify them anyways if you wish. If the asset is versioned, this can be left unspecified.</param>
            <exception cref="T:UAssetAPI.UnknownEngineVersionException">Thrown when this is an unversioned asset and <see cref="F:UAssetAPI.UAsset.EngineVersion"/> is unspecified.</exception>
            <exception cref="T:System.FormatException">Throw when the asset cannot be parsed correctly.</exception>
        </member>
        <member name="M:UAssetAPI.UAsset.#ctor(UAssetAPI.UE4Version,System.Collections.Generic.List{UAssetAPI.CustomVersion})">
            <summary>
            Initializes a new instance of the <see cref="T:UAssetAPI.UAsset"/> class. This instance will store no asset data and does not represent any asset in particular until the <see cref="M:UAssetAPI.UAsset.Read(UAssetAPI.AssetBinaryReader,System.Int32[],System.Int32[])"/> method is manually called.
            </summary>
            <param name="engineVersion">The version of the Unreal Engine that will be used to parse this asset. If the asset is versioned, this can be left unspecified.</param>
            <param name="defaultCustomVersionContainer">A list of custom versions to parse this asset with. A list of custom versions will automatically be derived from the engine version while parsing if necessary, but you may manually specify them anyways if you wish. If the asset is versioned, this can be left unspecified.</param>
        </member>
        <member name="M:UAssetAPI.UAsset.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UAssetAPI.UAsset"/> class. This instance will store no asset data and does not represent any asset in particular until the <see cref="M:UAssetAPI.UAsset.Read(UAssetAPI.AssetBinaryReader,System.Int32[],System.Int32[])"/> method is manually called.
            </summary>
        </member>
        <member name="T:UAssetAPI.Export">
            <summary>
            UObject resource type for objects that are contained within this package and can be referenced by other packages.
            </summary>
        </member>
        <member name="F:UAssetAPI.Export.ClassIndex">
            <summary>Location of this export's class (import/other export). 0 = this export is a UClass</summary>
        </member>
        <member name="F:UAssetAPI.Export.SuperIndex">
            <summary>Location of this export's parent class (import/other export). 0 = this export is not derived from UStruct</summary>
        </member>
        <member name="F:UAssetAPI.Export.TemplateIndex">
            <summary>Location of this export's template (import/other export). 0 = there is some problem</summary>
        </member>
        <member name="F:UAssetAPI.Export.ObjectFlags">
            <summary>The object flags for the UObject represented by this resource. Only flags that match the RF_Load combination mask will be loaded from disk and applied to the UObject.</summary>
        </member>
        <member name="F:UAssetAPI.Export.SerialSize">
            <summary>The number of bytes to serialize when saving/loading this export's UObject.</summary>
        </member>
        <member name="F:UAssetAPI.Export.SerialOffset">
            <summary>The location (into the FLinker's underlying file reader archive) of the beginning of the data for this export's UObject. Used for verification only.</summary>
        </member>
        <member name="F:UAssetAPI.Export.bForcedExport">
            <summary>Was this export forced into the export table via OBJECTMARK_ForceTagExp?</summary>
        </member>
        <member name="F:UAssetAPI.Export.bNotForClient">
            <summary>Should this export not be loaded on clients?</summary>
        </member>
        <member name="F:UAssetAPI.Export.bNotForServer">
            <summary>Should this export not be loaded on servers?</summary>
        </member>
        <member name="F:UAssetAPI.Export.PackageGuid">
            <summary>If this object is a top level package (which must have been forced into the export table via OBJECTMARK_ForceTagExp), this is the GUID for the original package file. Deprecated</summary>
        </member>
        <member name="F:UAssetAPI.Export.PackageFlags">
            <summary>If this export is a top-level package, this is the flags for the original package</summary>
        </member>
        <member name="F:UAssetAPI.Export.bNotAlwaysLoadedForEditorGame">
            <summary>Should this export be always loaded in editor game?</summary>
        </member>
        <member name="F:UAssetAPI.Export.bIsAsset">
            <summary>Is this export an asset?</summary>
        </member>
        <member name="F:UAssetAPI.Export.FirstExportDependency">
            <summary>
            The export table must serialize as a fixed size, this is used to index into a long list, which is later loaded into the array. -1 means dependencies are not present. These are contiguous blocks, so CreateBeforeSerializationDependencies starts at FirstExportDependency + SerializationBeforeSerializationDependencies.
            </summary>
        </member>
        <member name="F:UAssetAPI.Export.SerializationBeforeSerializationDependencies">
            <summary>
            The export table must serialize as a fixed size, this is used to index into a long list, which is later loaded into the array. -1 means dependencies are not present. These are contiguous blocks, so CreateBeforeSerializationDependencies starts at FirstExportDependency + SerializationBeforeSerializationDependencies.
            </summary>
        </member>
        <member name="F:UAssetAPI.Export.CreateBeforeSerializationDependencies">
            <summary>
            The export table must serialize as a fixed size, this is used to index into a long list, which is later loaded into the array. -1 means dependencies are not present. These are contiguous blocks, so CreateBeforeSerializationDependencies starts at FirstExportDependency + SerializationBeforeSerializationDependencies.
            </summary>
        </member>
        <member name="F:UAssetAPI.Export.SerializationBeforeCreateDependencies">
            <summary>
            The export table must serialize as a fixed size, this is used to index into a long list, which is later loaded into the array. -1 means dependencies are not present. These are contiguous blocks, so CreateBeforeSerializationDependencies starts at FirstExportDependency + SerializationBeforeSerializationDependencies.
            </summary>
        </member>
        <member name="F:UAssetAPI.Export.CreateBeforeCreateDependencies">
            <summary>
            The export table must serialize as a fixed size, this is used to index into a long list, which is later loaded into the array. -1 means dependencies are not present. These are contiguous blocks, so CreateBeforeSerializationDependencies starts at FirstExportDependency + SerializationBeforeSerializationDependencies.
            </summary>
        </member>
        <member name="F:UAssetAPI.Export.Extras">
            <summary>
            Miscellaneous, unparsed export data, stored as a byte array.
            </summary>
        </member>
        <member name="F:UAssetAPI.Export.Asset">
            <summary>
            The asset that this export is parsed with.
            </summary>
        </member>
        <member name="M:UAssetAPI.Export.ConvertToChildExport``1">
            <summary>
            Creates a child export instance with the same export details as the current export.
            </summary>
            <typeparam name="T">The type of child export to create.</typeparam>
            <returns>An instance of the child export type provided with the export details copied over.</returns>
        </member>
        <member name="T:UAssetAPI.RegistryEntry">
            <summary>
            An entry in the property type registry. Contains the class Type used for standard and struct property serialization.
            </summary>
        </member>
        <member name="T:UAssetAPI.MainSerializer">
            <summary>
            The main serializer for most property types in UAssetAPI.
            </summary>
        </member>
        <member name="P:UAssetAPI.MainSerializer.PropertyTypeRegistry">
            <summary>
            The property type registry. Maps serialized property names to their types.
            </summary>
        </member>
        <member name="M:UAssetAPI.MainSerializer.InitializePropertyTypeRegistry">
            <summary>
            Initializes the property type registry.
            </summary>
        </member>
        <member name="M:UAssetAPI.MainSerializer.TypeToClass(UAssetAPI.FName,UAssetAPI.FName,UAssetAPI.UAsset,UAssetAPI.AssetBinaryReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes the correct PropertyData class based off of serialized name, type, etc.
            </summary>
            <param name="type">The serialized type of this property.</param>
            <param name="name">The serialized name of this property.</param>
            <param name="asset">The UAsset which this property is contained within.</param>
            <param name="reader">The BinaryReader to read from. If left unspecified, you must call the <see cref="M:UAssetAPI.PropertyTypes.PropertyData.Read(UAssetAPI.AssetBinaryReader,System.Boolean,System.Int64,System.Int64)"/> method manually.</param>
            <param name="leng">The length of this property on disk in bytes.</param>
            <param name="duplicationIndex">The duplication index of this property.</param>
            <param name="includeHeader">Does this property serialize its header in the current context?</param>
            <returns>A new PropertyData instance based off of the passed parameters.</returns>
        </member>
        <member name="M:UAssetAPI.MainSerializer.Read(UAssetAPI.AssetBinaryReader,System.Boolean)">
            <summary>
            Reads a property into memory.
            </summary>
            <param name="reader">The BinaryReader to read from. The underlying stream should be at the position of the property to be read.</param>
            <param name="includeHeader">Does this property serialize its header in the current context?</param>
            <returns>The property read from disk.</returns>
        </member>
        <member name="M:UAssetAPI.MainSerializer.ReadFProperty(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads an FProperty into memory. Primarily used as a part of <see cref="T:UAssetAPI.StructExport"/> serialization.
            </summary>
            <param name="reader">The BinaryReader to read from. The underlying stream should be at the position of the FProperty to be read.</param>
            <returns>The FProperty read from disk.</returns>
        </member>
        <member name="M:UAssetAPI.MainSerializer.WriteFProperty(UAssetAPI.FieldTypes.FProperty,UAssetAPI.AssetBinaryWriter)">
            <summary>
            Serializes an FProperty from memory.
            </summary>
            <param name="prop">The FProperty to serialize.</param>
            <param name="writer">The BinaryWriter to serialize the FProperty to.</param>
        </member>
        <member name="M:UAssetAPI.MainSerializer.ReadUProperty(UAssetAPI.AssetBinaryReader,UAssetAPI.FName)">
            <summary>
            Reads a UProperty into memory. Primarily used as a part of <see cref="T:UAssetAPI.PropertyExport"/> serialization.
            </summary>
            <param name="reader">The BinaryReader to read from. The underlying stream should be at the position of the UProperty to be read.</param>
            <param name="serializedType">The type of UProperty to be read.</param>
            <returns>The FProperty read from disk.</returns>
        </member>
        <member name="M:UAssetAPI.MainSerializer.ReadUProperty(UAssetAPI.AssetBinaryReader,System.Type)">
            <summary>
            Reads a UProperty into memory. Primarily used as a part of <see cref="T:UAssetAPI.PropertyExport"/> serialization.
            </summary>
            <param name="reader">The BinaryReader to read from. The underlying stream should be at the position of the UProperty to be read.</param>
            <param name="requestedType">The type of UProperty to be read.</param>
            <returns>The FProperty read from disk.</returns>
        </member>
        <member name="M:UAssetAPI.MainSerializer.ReadUProperty``1(UAssetAPI.AssetBinaryReader)">
            <summary>
            Reads a UProperty into memory. Primarily used as a part of <see cref="T:UAssetAPI.PropertyExport"/> serialization.
            </summary>
            <param name="reader">The BinaryReader to read from. The underlying stream should be at the position of the UProperty to be read.</param>
            <returns>The FProperty read from disk.</returns>
        </member>
        <member name="M:UAssetAPI.MainSerializer.WriteUProperty(UAssetAPI.FieldTypes.UProperty,UAssetAPI.AssetBinaryWriter)">
            <summary>
            Serializes a UProperty from memory.
            </summary>
            <param name="prop">The UProperty to serialize.</param>
            <param name="writer">The BinaryWriter to serialize the UProperty to.</param>
        </member>
        <member name="M:UAssetAPI.MainSerializer.Write(UAssetAPI.PropertyTypes.PropertyData,UAssetAPI.AssetBinaryWriter,System.Boolean)">
            <summary>
            Serializes a property from memory.
            </summary>
            <param name="property">The property to serialize.</param>
            <param name="writer">The BinaryWriter to serialize the property to.</param>
            <param name="includeHeader">Does this property serialize its header in the current context?</param>
            <returns>The serial offset where the length of the property is stored.</returns>
        </member>
        <member name="T:UAssetAPI.Import">
            <summary>
            UObject resource type for objects that are referenced by this package, but contained within another package.
            </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_VARS_NOT_READ_ONLY">
            <summary>Removed restriction on blueprint-exposed variables from being read-only</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STATIC_MESH_STORE_NAV_COLLISION">
            <summary>Added manually serialized element to UStaticMesh (precalculated nav collision)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ATMOSPHERIC_FOG_DECAY_NAME_CHANGE">
            <summary>Changed property name for atmospheric fog</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SCENECOMP_TRANSLATION_TO_LOCATION">
            <summary>Change many properties/functions from Translation to Location</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MATERIAL_ATTRIBUTES_REORDERING">
            <summary>Material attributes reordering</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_COLLISION_PROFILE_SETTING">
            <summary>Collision Profile setting has been added, and all components that exists has to be properly upgraded</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_SKEL_TEMPORARY_TRANSIENT">
            <summary>Making the blueprint's skeleton class transient</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_SKEL_SERIALIZED_AGAIN">
            <summary>Making the blueprint's skeleton class serialized again</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_SETS_REPLICATION">
            <summary>Blueprint now controls replication settings again</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_WORLD_LEVEL_INFO">
            <summary>Added level info used by World browser</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_AFTER_CAPSULE_HALF_HEIGHT_CHANGE">
            <summary>Changed capsule height to capsule half-height (afterwards)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_NAMESPACE_AND_KEY_DATA_TO_FTEXT">
            <summary>Added Namepace, GUID (Key) and Flags to FText</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ATTENUATION_SHAPES">
            <summary>Attenuation shapes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LIGHTCOMPONENT_USE_IES_TEXTURE_MULTIPLIER_ON_NON_IES_BRIGHTNESS">
            <summary>Use IES texture multiplier even when IES brightness is not being used</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_INPUT_COMPONENTS_FROM_BLUEPRINTS">
            <summary>Removed InputComponent as a blueprint addable component</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_VARK2NODE_USE_MEMBERREFSTRUCT">
            <summary>Use an FMemberReference struct in UK2Node_Variable</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFACTOR_MATERIAL_EXPRESSION_SCENECOLOR_AND_SCENEDEPTH_INPUTS">
            <summary>Refactored material expression inputs for UMaterialExpressionSceneColor and UMaterialExpressionSceneDepth</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SPLINE_MESH_ORIENTATION">
            <summary>Spline meshes changed from Z forwards to configurable</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REVERB_EFFECT_ASSET_TYPE">
            <summary>Added ReverbEffect asset type</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MAX_TEXCOORD_INCREASED">
            <summary>changed max texcoords from 4 to 8</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SPEEDTREE_STATICMESH">
            <summary>static meshes changed to support SpeedTrees</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LANDSCAPE_COMPONENT_LAZY_REFERENCES">
            <summary>Landscape component reference between landscape component and collision component</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SWITCH_CALL_NODE_TO_USE_MEMBER_REFERENCE">
            <summary>Refactored UK2Node_CallFunction to use FMemberReference</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_SKELETON_ARCHIVER_REMOVAL">
            <summary>Added fixup step to remove skeleton class references from blueprint objects</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_SKELETON_ARCHIVER_REMOVAL_SECOND_TIME">
            <summary>See above, take 2.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_SKEL_CLASS_TRANSIENT_AGAIN">
            <summary>Making the skeleton class on blueprints transient</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_COOKED_TO_UCLASS">
            <summary>UClass knows if it's been cooked</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DEPRECATED_STATIC_MESH_THUMBNAIL_PROPERTIES_REMOVED">
            <summary>Deprecated static mesh thumbnail properties were removed</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_COLLECTIONS_IN_SHADERMAPID">
            <summary>Added collections in material shader map ids</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFACTOR_MOVEMENT_COMPONENT_HIERARCHY">
            <summary>Renamed some Movement Component properties, added PawnMovementComponent</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_TERRAIN_LAYER_SWITCH_ORDER">
            <summary>Swap UMaterialExpressionTerrainLayerSwitch::LayerUsed/LayerNotUsed the correct way round</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ALL_PROPS_TO_CONSTRAINTINSTANCE">
            <summary>Remove URB_ConstraintSetup</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LOW_QUALITY_DIRECTIONAL_LIGHTMAPS">
            <summary>Low quality directional lightmaps</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_NOISE_EMITTER_COMPONENT">
            <summary>Added NoiseEmitterComponent and removed related Pawn properties.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_TEXT_COMPONENT_VERTICAL_ALIGNMENT">
            <summary>Add text component vertical alignment</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_FBX_ASSET_IMPORT_DATA">
            <summary>Added AssetImportData for FBX asset types, deprecating SourceFilePath and SourceFileTimestamp</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_LEVELBODYSETUP">
            <summary>Remove LevelBodySetup from ULevel</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFACTOR_CHARACTER_CROUCH">
            <summary>Refactor character crouching</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SMALLER_DEBUG_MATERIALSHADER_UNIFORM_EXPRESSIONS">
            <summary>Trimmed down material shader debug information.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_APEX_CLOTH">
            <summary>APEX Clothing</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SAVE_COLLISIONRESPONSE_PER_CHANNEL">
            <summary>
            Change Collision Channel to save only modified ones than all of them.
            Note!!! Once we pass this CL, we can rename FCollisionResponseContainer enum values.
            We should rename to match ECollisionChannel
            </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_LANDSCAPE_SPLINE_EDITOR_MESH">
            <summary>Added Landscape Spline editor meshes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHANGED_MATERIAL_REFACTION_TYPE">
            <summary>Fixup input expressions for reading from refraction material attributes.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFACTOR_PROJECTILE_MOVEMENT">
            <summary>Refactor projectile movement, along with some other movement component work.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_PHYSICALMATERIALPROPERTY">
            <summary>Remove PhysicalMaterialProperty and replace with user defined enum</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PURGED_FMATERIAL_COMPILE_OUTPUTS">
            <summary>Removed all compile outputs from FMaterial</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_COOKED_TO_LANDSCAPE">
            <summary>Ability to save cooked PhysX meshes to Landscape</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CONSUME_INPUT_PER_BIND">
            <summary>Change how input component consumption works</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SOUND_CLASS_GRAPH_EDITOR">
            <summary>Added new Graph based SoundClass Editor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIXUP_TERRAIN_LAYER_NODES">
            <summary>Fixed terrain layer node guids which was causing artifacts</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_RETROFIT_CLAMP_EXPRESSIONS_SWAP">
            <summary>Added clamp min/max swap check to catch older materials</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_LIGHT_MOBILITY_CLASSES">
            <summary>Remove static/movable/stationary light classes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFACTOR_PHYSICS_BLENDING">
            <summary>Refactor the way physics blending works to allow partial blending</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_WORLD_LEVEL_INFO_UPDATED">
            <summary>WorldLevelInfo: Added reference to parent level and streaming distance</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STATIC_SKELETAL_MESH_SERIALIZATION_FIX">
            <summary>Fixed cooking of skeletal/static meshes due to bad serialization logic</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_STATICMESH_MOBILITY_CLASSES">
            <summary>Removal of InterpActor and PhysicsActor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFACTOR_PHYSICS_TRANSFORMS">
            <summary>Refactor physics transforms</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_ZERO_TRIANGLE_SECTIONS">
            <summary>Remove zero triangle sections from static meshes and compact material indices.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_MOVEMENT_DECELERATION">
            <summary>Add param for deceleration in character movement instead of using acceleration.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CAMERA_ACTOR_USING_CAMERA_COMPONENT">
            <summary>Made ACameraActor use a UCameraComponent for parameter storage, etc...</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_MOVEMENT_DEPRECATE_PITCH_ROLL">
            <summary>Deprecated some pitch/roll properties in CharacterMovementComponent</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REBUILD_TEXTURE_STREAMING_DATA_ON_LOAD">
            <summary>Rebuild texture streaming data on load for uncooked builds</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SUPPORT_32BIT_STATIC_MESH_INDICES">
            <summary>Add support for 32 bit index buffers for static meshes.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_CHUNKID_TO_ASSETDATA_AND_UPACKAGE">
            <summary>Added streaming install ChunkID to AssetData and UPackage</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_DEFAULT_MOVEMENT_BINDINGS">
            <summary>Add flag to control whether Character blueprints receive default movement bindings.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_APEX_CLOTH_LOD">
            <summary>APEX Clothing LOD Info</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ATMOSPHERIC_FOG_CACHE_DATA">
            <summary>Added atmospheric fog texture data to be general</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VAR_UE4_ARRAY_PROPERTY_INNER_TAGS">
            <summary>Arrays serialize their inner's tags</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_KEEP_SKEL_MESH_INDEX_DATA">
            <summary>Skeletal mesh index data is kept in memory in game to support mesh merging.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BODYSETUP_COLLISION_CONVERSION">
            <summary>Added compatibility for the body instance collision change</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFLECTION_CAPTURE_COOKING">
            <summary>Reflection capture cooking</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_DYNAMIC_VOLUME_CLASSES">
            <summary>Removal of DynamicTriggerVolume, DynamicBlockingVolume, DynamicPhysicsVolume</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STORE_HASCOOKEDDATA_FOR_BODYSETUP">
            <summary>Store an additional flag in the BodySetup to indicate whether there is any cooked data to load</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFRACTION_BIAS_TO_REFRACTION_DEPTH_BIAS">
            <summary>Changed name of RefractionBias to RefractionDepthBias.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_SKELETALPHYSICSACTOR">
            <summary>Removal of SkeletalPhysicsActor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PC_ROTATION_INPUT_REFACTOR">
            <summary>PlayerController rotation input refactor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LANDSCAPE_PLATFORMDATA_COOKING">
            <summary>Landscape Platform Data cooking</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CREATEEXPORTS_CLASS_LINKING_FOR_BLUEPRINTS">
            <summary>Added call for linking classes in CreateExport to ensure memory is initialized properly</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_NATIVE_COMPONENTS_FROM_BLUEPRINT_SCS">
            <summary>Remove native component nodes from the blueprint SimpleConstructionScript</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_SINGLENODEINSTANCE">
            <summary>Removal of Single Node Instance</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_BRAKING_REFACTOR">
            <summary>Character movement braking changes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_VOLUME_SAMPLE_LOW_QUALITY_SUPPORT">
            <summary>Supported low quality lightmaps in volume samples</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SPLIT_TOUCH_AND_CLICK_ENABLES">
            <summary>Split bEnableTouchEvents out from bEnableClickEvents</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_HEALTH_DEATH_REFACTOR">
            <summary>Health/Death refactor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SOUND_NODE_ENVELOPER_CURVE_CHANGE">
            <summary>Moving USoundNodeEnveloper from UDistributionFloatConstantCurve to FRichCurve</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_POINT_LIGHT_SOURCE_RADIUS">
            <summary>Moved SourceRadius to UPointLightComponent</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SCENE_CAPTURE_CAMERA_CHANGE">
            <summary>Scene capture actors based on camera actors.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MOVE_SKELETALMESH_SHADOWCASTING">
            <summary>Moving SkeletalMesh shadow casting flag from LoD details to material</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHANGE_SETARRAY_BYTECODE">
            <summary>Changing bytecode operators for creating arrays</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MATERIAL_INSTANCE_BASE_PROPERTY_OVERRIDES">
            <summary>Material Instances overriding base material properties.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_COMBINED_LIGHTMAP_TEXTURES">
            <summary>Combined top/bottom lightmap textures</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BUMPED_MATERIAL_EXPORT_GUIDS">
            <summary>Forced material lightmass guids to be regenerated</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_INPUT_BINDING_OVERRIDES">
            <summary>Allow overriding of parent class input bindings</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIXUP_BODYSETUP_INVALID_CONVEX_TRANSFORM">
            <summary>Fix up convex invalid transform</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIXUP_STIFFNESS_AND_DAMPING_SCALE">
            <summary>Fix up scale of physics stiffness and damping value</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFERENCE_SKELETON_REFACTOR">
            <summary>Convert USkeleton and FBoneContrainer to using FReferenceSkeleton.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_K2NODE_REFERENCEGUIDS">
            <summary>Adding references to variable, function, and macro nodes to be able to update to renamed values</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIXUP_ROOTBONE_PARENT">
            <summary>Fix up the 0th bone's parent bone index.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MATERIAL_INSTANCE_BASE_PROPERTY_OVERRIDES_PHASE_2">
            <summary>Material Instances overriding base material properties #2.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CLASS_NOTPLACEABLE_ADDED">
            <summary>CLASS_Placeable becomes CLASS_NotPlaceable</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_WORLD_LEVEL_INFO_LOD_LIST">
            <summary>Added LOD info list to a world tile description</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_MOVEMENT_VARIABLE_RENAMING_1">
            <summary>CharacterMovement variable naming refactor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FSLATESOUND_CONVERSION">
            <summary>FName properties containing sound names converted to FSlateSound properties</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_WORLD_LEVEL_INFO_ZORDER">
            <summary>Added ZOrder to a world tile description</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PACKAGE_REQUIRES_LOCALIZATION_GATHER_FLAGGING">
            <summary>Added flagging of localization gather requirement to packages</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BP_ACTOR_VARIABLE_DEFAULT_PREVENTING">
            <summary>Preventing Blueprint Actor variables from having default values</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_TEST_ANIMCOMP_CHANGE">
            <summary>Preventing Blueprint Actor variables from having default values</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_EDITORONLY_BLUEPRINTS">
            <summary>Class as primary asset, name convention changed</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_EDGRAPHPINTYPE_SERIALIZATION">
            <summary>Custom serialization for FEdGraphPinType</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_NO_MIRROR_BRUSH_MODEL_COLLISION">
            <summary>Stop generating 'mirrored' cooked mesh for Brush and Model components</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHANGED_CHUNKID_TO_BE_AN_ARRAY_OF_CHUNKIDS">
            <summary>Changed ChunkID to be an array of IDs.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_WORLD_NAMED_AFTER_PACKAGE">
            <summary>Worlds have been renamed from "TheWorld" to be named after the package containing them</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKY_LIGHT_COMPONENT">
            <summary>Added sky light component</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_WORLD_LAYER_ENABLE_DISTANCE_STREAMING">
            <summary>Added Enable distance streaming flag to FWorldTileLayer</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_ZONES_FROM_MODEL">
            <summary>Remove visibility/zone information from UModel</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_ANIMATIONBASEPOSE_SERIALIZATION">
            <summary>Fix base pose serialization </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SUPPORT_8_BONE_INFLUENCES_SKELETAL_MESHES">
            <summary>Support for up to 8 skinning influences per vertex on skeletal meshes (on non-gpu vertices)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_OVERRIDE_GRAVITY_FLAG">
            <summary>Add explicit bOverrideGravity to world settings</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SUPPORT_GPUSKINNING_8_BONE_INFLUENCES">
            <summary>Support for up to 8 skinning influences per vertex on skeletal meshes (on gpu vertices)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ANIM_SUPPORT_NONUNIFORM_SCALE_ANIMATION">
            <summary>Supporting nonuniform scale animation</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ENGINE_VERSION_OBJECT">
            <summary>Engine version is stored as a FEngineVersion object rather than changelist number</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PUBLIC_WORLDS">
            <summary>World assets now have RF_Public</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKELETON_GUID_SERIALIZATION">
            <summary>Skeleton Guid</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_MOVEMENT_WALKABLE_FLOOR_REFACTOR">
            <summary>Character movement WalkableFloor refactor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_INVERSE_SQUARED_LIGHTS_DEFAULT">
            <summary>Lights default to inverse squared</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DISABLED_SCRIPT_LIMIT_BYTECODE">
            <summary>Disabled SCRIPT_LIMIT_BYTECODE_TO_64KB</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PRIVATE_REMOTE_ROLE">
            <summary>Made remote role private, exposed bReplicates</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FOLIAGE_STATIC_MOBILITY">
            <summary>Fix up old foliage components to have static mobility (superseded by VER_UE4_FOLIAGE_MOVABLE_MOBILITY)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BUILD_SCALE_VECTOR">
            <summary>Change BuildScale from a float to a vector</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FOLIAGE_COLLISION">
            <summary>After implementing foliage collision, need to disable collision on old foliage instances</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKY_BENT_NORMAL">
            <summary>Added sky bent normal to indirect lighting cache</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LANDSCAPE_COLLISION_DATA_COOKING">
            <summary>Added cooking for landscape collision data</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MORPHTARGET_CPU_TANGENTZDELTA_FORMATCHANGE">
            <summary>
            Convert CPU tangent Z delta to vector from PackedNormal since we don't get any benefit other than memory
            we still convert all to FVector in CPU time whenever any calculation
            </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SOFT_CONSTRAINTS_USE_MASS">
            <summary>Soft constraint limits will implicitly use the mass of the bodies</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REFLECTION_DATA_IN_PACKAGES">
            <summary>Reflection capture data saved in packages</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FOLIAGE_MOVABLE_MOBILITY">
            <summary>Fix up old foliage components to have movable mobility (superseded by VER_UE4_FOLIAGE_STATIC_LIGHTING_SUPPORT)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_UNDO_BREAK_MATERIALATTRIBUTES_CHANGE">
            <summary>Undo BreakMaterialAttributes changes as it broke old content</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_CUSTOMPROFILENAME_CHANGE">
            <summary>Now Default custom profile name isn't NONE anymore due to copy/paste not working properly with it</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FLIP_MATERIAL_COORDS">
            <summary>Permanently flip and scale material expression coordinates</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MEMBERREFERENCE_IN_PINTYPE">
            <summary>PinSubCategoryMemberReference added to FEdGraphPinType</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_VEHICLES_UNIT_CHANGE">
            <summary>Vehicles use Nm for Torque instead of cm and RPM instead of rad/s</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ANIMATION_REMOVE_NANS">
            <summary>
            removes NANs from all animations when loaded
            now importing should detect NaNs, so we should not have NaNs in source data
            </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKELETON_ASSET_PROPERTY_TYPE_CHANGE">
            <summary>Change skeleton preview attached assets property type</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_BLUEPRINT_VARIABLE_FLAGS">
            <summary>
            Fix some blueprint variables that have the CPF_DisableEditOnTemplate flag set
            when they shouldn't
            </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_VEHICLES_UNIT_CHANGE2">
            <summary>Vehicles use Nm for Torque instead of cm and RPM instead of rad/s part two (missed conversion for some variables</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_UCLASS_SERIALIZE_INTERFACES_AFTER_LINKING">
            <summary>Changed order of interface class serialization</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STATIC_MESH_SCREEN_SIZE_LODS">
            <summary>Change from LOD distances to display factors</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_MATERIAL_COORDS">
            <summary>Requires test of material coords to ensure they're saved correctly</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SPEEDTREE_WIND_V7">
            <summary>Changed SpeedTree wind presets to v7</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LOAD_FOR_EDITOR_GAME">
            <summary>NeedsLoadForEditorGame added</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SERIALIZE_RICH_CURVE_KEY">
            <summary>Manual serialization of FRichCurveKey to save space</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MOVE_LANDSCAPE_MICS_AND_TEXTURES_WITHIN_LEVEL">
            <summary>Change the outer of ULandscapeMaterialInstanceConstants and Landscape-related textures to the level in which they reside</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FTEXT_HISTORY">
            <summary>FTexts have creation history data, removed Key, Namespaces, and SourceString</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_MATERIAL_COMMENTS">
            <summary>Shift comments to the left to contain expressions properly</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STORE_BONE_EXPORT_NAMES">
            <summary>Bone names stored as FName means that we can't guarantee the correct case on export, now we store a separate string for export purposes only</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MESH_EMITTER_INITIAL_ORIENTATION_DISTRIBUTION">
            <summary>changed mesh emitter initial orientation to distribution</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DISALLOW_FOLIAGE_ON_BLUEPRINTS">
            <summary>Foliage on blueprints causes crashes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIXUP_MOTOR_UNITS">
            <summary>change motors to use revolutions per second instead of rads/second</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DEPRECATED_MOVEMENTCOMPONENT_MODIFIED_SPEEDS">
            <summary>deprecated MovementComponent functions including "ModifiedMaxSpeed" et al</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_RENAME_CANBECHARACTERBASE">
            <summary>rename CanBeCharacterBase</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_GAMEPLAY_TAG_CONTAINER_TAG_TYPE_CHANGE">
            <summary>Change GameplayTagContainers to have FGameplayTags instead of FNames; Required to fix-up native serialization</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FOLIAGE_SETTINGS_TYPE">
            <summary>Change from UInstancedFoliageSettings to UFoliageType, and change the api from being keyed on UStaticMesh* to UFoliageType*</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STATIC_SHADOW_DEPTH_MAPS">
            <summary>Lights serialize static shadow depth maps</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_TRANSACTIONAL_TO_DATA_ASSETS">
            <summary>Add RF_Transactional to data assets, fixing undo problems when editing them</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_LB_WEIGHTBLEND">
            <summary>Change LB_AlphaBlend to LB_WeightBlend in ELandscapeLayerBlendType</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_ROOTCOMPONENT_TO_FOLIAGEACTOR">
            <summary>Add root component to an foliage actor, all foliage cluster components will be attached to a root</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_MATERIAL_PROPERTY_OVERRIDE_SERIALIZE">
            <summary>FMaterialInstanceBasePropertyOverrides didn't use proper UObject serialize</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_LINEAR_COLOR_SAMPLER">
            <summary>Addition of linear color sampler. color sample type is changed to linear sampler if source texture !sRGB</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_STRING_ASSET_REFERENCES_MAP">
            <summary>Added StringAssetReferencesMap to support renames of FStringAssetReference properties.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_USE_SCS_ROOTCOMPONENT_SCALE">
            <summary>Apply scale from SCS RootComponent details in the Blueprint Editor to new actor instances at construction time</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LEVEL_STREAMING_DRAW_COLOR_TYPE_CHANGE">
            <summary>Changed level streaming to have a linear color since the visualization doesn't gamma correct.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CLEAR_NOTIFY_TRIGGERS">
            <summary>Cleared end triggers from non-state anim notifies</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKELETON_ADD_SMARTNAMES">
            <summary>Convert old curve names stored in anim assets into skeleton smartnames</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_CURRENCY_CODE_TO_FTEXT">
            <summary>Added the currency code field to FTextHistory_AsCurrency</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ENUM_CLASS_SUPPORT">
            <summary>Added support for C++11 enum classes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIXUP_WIDGET_ANIMATION_CLASS">
            <summary>Fixup widget animation class</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SOUND_COMPRESSION_TYPE_ADDED">
            <summary>USoundWave objects now contain details about compression scheme used.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_AUTO_WELDING">
            <summary>Bodies will automatically weld when attached</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_RENAME_CROUCHMOVESCHARACTERDOWN">
            <summary>Rename UCharacterMovementComponent::bCrouchMovesCharacterDown</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LIGHTMAP_MESH_BUILD_SETTINGS">
            <summary>Lightmap parameters in FMeshBuildSettings</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_RENAME_SM3_TO_ES3_1">
            <summary>Rename SM3 to ES3_1 and updates featurelevel material node selector</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DEPRECATE_UMG_STYLE_ASSETS">
            <summary>Deprecated separate style assets for use in UMG</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_POST_DUPLICATE_NODE_GUID">
            <summary>Duplicating Blueprints will regenerate NodeGuids after this version</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_RENAME_CAMERA_COMPONENT_VIEW_ROTATION">
            <summary>
            Rename USpringArmComponent::bUseControllerViewRotation to bUsePawnViewRotation,
            Rename UCameraComponent::bUseControllerViewRotation to bUsePawnViewRotation (and change the default value)
            </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CASE_PRESERVING_FNAME">
            <summary>Changed FName to be case preserving</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_RENAME_CAMERA_COMPONENT_CONTROL_ROTATION">
            <summary>
            Rename USpringArmComponent::bUsePawnViewRotation to bUsePawnControlRotation,
            Rename UCameraComponent::bUsePawnViewRotation to bUsePawnControlRotation
            </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_REFRACTION_INPUT_MASKING">
            <summary>Fix bad refraction material attribute masks</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_GLOBAL_EMITTER_SPAWN_RATE_SCALE">
            <summary>A global spawn rate for emitters.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CLEAN_DESTRUCTIBLE_SETTINGS">
            <summary>Cleanup destructible mesh settings</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_MOVEMENT_UPPER_IMPACT_BEHAVIOR">
            <summary>CharacterMovementComponent refactor of AdjustUpperHemisphereImpact and deprecation of some associated vars.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BP_MATH_VECTOR_EQUALITY_USES_EPSILON">
            <summary>Changed Blueprint math equality functions for vectors and rotators to operate as a "nearly" equals rather than "exact"</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FOLIAGE_STATIC_LIGHTING_SUPPORT">
            <summary>Static lighting support was re-added to foliage, and mobility was returned to static</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SLATE_COMPOSITE_FONTS">
            <summary>Added composite fonts to Slate font info</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_SAVEGAMESUMMARY">
            <summary>Remove UDEPRECATED_SaveGameSummary, required for UWorld::Serialize</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_SKELETALMESH_COMPONENT_BODYSETUP_SERIALIZATION">
            <summary>Remove bodyseutp serialization from skeletal mesh component</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SLATE_BULK_FONT_DATA">
            <summary>Made Slate font data use bulk data to store the embedded font data</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_PROJECTILE_FRICTION_BEHAVIOR">
            <summary>Add new friction behavior in ProjectileMovementComponent.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MOVEMENTCOMPONENT_AXIS_SETTINGS">
            <summary>Add axis settings enum to MovementComponent.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_GRAPH_INTERACTIVE_COMMENTBUBBLES">
            <summary>Switch to new interactive comments, requires boundry conversion to preserve previous states</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LANDSCAPE_SERIALIZE_PHYSICS_MATERIALS">
            <summary>Landscape serializes physical materials for collision objects </summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_RENAME_WIDGET_VISIBILITY">
            <summary>Rename Visiblity on widgets to Visibility</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ANIMATION_ADD_TRACKCURVES">
            <summary>add track curves for animation</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MONTAGE_BRANCHING_POINT_REMOVAL">
            <summary>Removed BranchingPoints from AnimMontages and converted them to regular AnimNotifies.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_ENFORCE_CONST_IN_FUNCTION_OVERRIDES">
            <summary>Enforce const-correctness in Blueprint implementations of native C++ const class methods</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_PIVOT_TO_WIDGET_COMPONENT">
            <summary>Added pivot to widget components, need to load old versions as a 0,0 pivot, new default is 0.5,0.5</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PAWN_AUTO_POSSESS_AI">
            <summary>Added finer control over when AI Pawns are automatically possessed. Also renamed Pawn.AutoPossess to Pawn.AutoPossessPlayer indicate this was a setting for players and not AI.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FTEXT_HISTORY_DATE_TIMEZONE">
            <summary>Added serialization of timezone to FTextHistory for AsDate operations.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SORT_ACTIVE_BONE_INDICES">
            <summary>Sort ActiveBoneIndices on lods so that we can avoid doing it at run time</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PERFRAME_MATERIAL_UNIFORM_EXPRESSIONS">
            <summary>Added per-frame material uniform expressions</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MIKKTSPACE_IS_DEFAULT">
            <summary>Make MikkTSpace the default tangent space calculation method for static meshes.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LANDSCAPE_GRASS_COOKING">
            <summary>Only applies to cooked files, grass cooking support.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_SKEL_VERT_ORIENT_MESH_PARTICLES">
            <summary>Fixed code for using the bOrientMeshEmitters property.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LANDSCAPE_STATIC_SECTION_OFFSET">
            <summary>Do not change landscape section offset on load under world composition</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_MODIFIERS_RUNTIME_GENERATION">
            <summary>New options for navigation data runtime generation (static, modifiers only, dynamic)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MATERIAL_MASKED_BLENDMODE_TIDY">
            <summary>Tidied up material's handling of masked blend mode.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MERGED_ADD_MODIFIERS_RUNTIME_GENERATION_TO_4_7_DEPRECATED">
            <summary>Original version of VER_UE4_MERGED_ADD_MODIFIERS_RUNTIME_GENERATION_TO_4_7; renumbered to prevent blocking promotion in main.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_AFTER_MERGED_ADD_MODIFIERS_RUNTIME_GENERATION_TO_4_7_DEPRECATED">
            <summary>Original version of VER_UE4_AFTER_MERGED_ADD_MODIFIERS_RUNTIME_GENERATION_TO_4_7; renumbered to prevent blocking promotion in main.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MERGED_ADD_MODIFIERS_RUNTIME_GENERATION_TO_4_7">
            <summary>After merging VER_UE4_ADD_MODIFIERS_RUNTIME_GENERATION into 4.7 branch</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_AFTER_MERGING_ADD_MODIFIERS_RUNTIME_GENERATION_TO_4_7">
            <summary>After merging VER_UE4_ADD_MODIFIERS_RUNTIME_GENERATION into 4.7 branch</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SERIALIZE_LANDSCAPE_GRASS_DATA">
            <summary>Landscape grass weightmap data is now generated in the editor and serialized.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_OPTIONALLY_CLEAR_GPU_EMITTERS_ON_INIT">
            <summary>New property to optionally prevent gpu emitters clearing existing particles on Init().</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SERIALIZE_LANDSCAPE_GRASS_DATA_MATERIAL_GUID">
            <summary>Also store the Material guid with the landscape grass data</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_GENERATED_CLASS_COMPONENT_TEMPLATES_PUBLIC">
            <summary>Make sure that all template components from blueprint generated classes are flagged as public</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ACTOR_COMPONENT_CREATION_METHOD">
            <summary>Split out creation method on ActorComponents to distinguish between native, instance, and simple or user construction script</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_K2NODE_EVENT_MEMBER_REFERENCE">
            <summary>K2Node_Event now uses FMemberReference for handling references</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STRUCT_GUID_IN_PROPERTY_TAG">
            <summary>FPropertyTag stores GUID of struct</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVE_UNUSED_UPOLYS_FROM_UMODEL">
            <summary>Remove unused UPolys from UModel cooked content</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REBUILD_HIERARCHICAL_INSTANCE_TREES">
            <summary>This doesn't do anything except trigger a rebuild on HISMC cluster trees, in this case to get a good "occlusion query" level</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PACKAGE_SUMMARY_HAS_COMPATIBLE_ENGINE_VERSION">
            <summary>Package summary includes an CompatibleWithEngineVersion field, separately to the version it's saved with</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_TRACK_UCS_MODIFIED_PROPERTIES">
            <summary>Track UCS modified properties on Actor Components</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LANDSCAPE_SPLINE_CROSS_LEVEL_MESHES">
            <summary>Allowed landscape spline meshes to be stored into landscape streaming levels rather than the spline's level</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DEPRECATE_USER_WIDGET_DESIGN_SIZE">
            <summary>Deprecate the variables used for sizing in the designer on UUserWidget</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_EDITOR_VIEWS">
            <summary>Make the editor views array dynamically sized</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FOLIAGE_WITH_ASSET_OR_CLASS">
            <summary>Updated foliage to work with either FoliageType assets or blueprint classes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BODYINSTANCE_BINARY_SERIALIZATION">
            <summary>Allows PhysicsSerializer to serialize shapes and actors for faster load times</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SERIALIZE_BLUEPRINT_EVENTGRAPH_FASTCALLS_IN_UFUNCTION">
            <summary>Added fastcall data serialization directly in UFunction</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_INTERPCURVE_SUPPORTS_LOOPING">
            <summary>Changes to USplineComponent and FInterpCurve</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MATERIAL_INSTANCE_BASE_PROPERTY_OVERRIDES_DITHERED_LOD_TRANSITION">
            <summary>Material Instances overriding base material LOD transitions</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SERIALIZE_LANDSCAPE_ES2_TEXTURES">
            <summary>Serialize ES2 textures separately rather than overwriting the properties used on other platforms</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CONSTRAINT_INSTANCE_MOTOR_FLAGS">
            <summary>Constraint motor velocity is broken into per-component</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SERIALIZE_PINTYPE_CONST">
            <summary>Serialize bIsConst in FEdGraphPinType</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_LIBRARY_CATEGORIES_AS_FTEXT">
            <summary>Change UMaterialFunction::LibraryCategories to LibraryCategoriesText (old assets were saved before auto-conversion of FArrayProperty was possible)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKIP_DUPLICATE_EXPORTS_ON_SAVE_PACKAGE">
            <summary>Check for duplicate exports while saving packages.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SERIALIZE_TEXT_IN_PACKAGES">
            <summary>Pre-gathering of gatherable, localizable text in packages to optimize text gathering operation times</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADD_BLEND_MODE_TO_WIDGET_COMPONENT">
            <summary>Added pivot to widget components, need to load old versions as a 0,0 pivot, new default is 0.5,0.5</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_NEW_LIGHTMASS_PRIMITIVE_SETTING">
            <summary>Added lightmass primitive setting</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REPLACE_SPRING_NOZ_PROPERTY">
            <summary>Deprecate NoZSpring property on spring nodes to be replaced with TranslateZ property</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_TIGHTLY_PACKED_ENUMS">
            <summary>Keep enums tight and serialize their values as pairs of FName and value. Don't insert dummy values.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ASSET_IMPORT_DATA_AS_JSON">
            <summary>Changed Asset import data to serialize file meta data as JSON</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_TEXTURE_LEGACY_GAMMA">
            <summary>Legacy gamma support for textures.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_NATIVE_SERIALIZATION_FOR_IMMUTABLE_STRUCTURES">
            <summary>Added WithSerializer for basic native structures like FVector, FColor etc to improve serialization performance</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DEPRECATE_UMG_STYLE_OVERRIDES">
            <summary>Deprecated attributes that override the style on UMG widgets</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STATIC_SHADOWMAP_PENUMBRA_SIZE">
            <summary>Shadowmap penumbra size stored</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_NIAGARA_DATA_OBJECT_DEV_UI_FIX">
            <summary>Fix BC on Niagara effects from the data object and dev UI changes.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIXED_DEFAULT_ORIENTATION_OF_WIDGET_COMPONENT">
            <summary>Fixed the default orientation of widget component so it faces down +x</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_REMOVED_MATERIAL_USED_WITH_UI_FLAG">
            <summary>Removed bUsedWithUI flag from UMaterial and replaced it with a new material domain for UI</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CHARACTER_MOVEMENT_ADD_BRAKING_FRICTION">
            <summary>Added braking friction separate from turning friction.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BSP_UNDO_FIX">
            <summary>Removed TTransArrays from UModel</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DYNAMIC_PARAMETER_DEFAULT_VALUE">
            <summary>Added default value to dynamic parameter.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STATIC_MESH_EXTENDED_BOUNDS">
            <summary>Added ExtendedBounds to StaticMesh</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_NON_LINEAR_TRANSITION_BLENDS">
            <summary>Added non-linear blending to anim transitions, deprecating old types</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_AO_MATERIAL_MASK">
            <summary>AO Material Mask texture</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_NAVIGATION_AGENT_SELECTOR">
            <summary>Replaced navigation agents selection with single structure</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MESH_PARTICLE_COLLISIONS_CONSIDER_PARTICLE_SIZE">
            <summary>Mesh particle collisions consider particle size.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BUILD_MESH_ADJ_BUFFER_FLAG_EXPOSED">
            <summary>Adjacency buffer building no longer automatically handled based on triangle count, user-controlled</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MAX_ANGULAR_VELOCITY_DEFAULT">
            <summary>Change the default max angular velocity</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_APEX_CLOTH_TESSELLATION">
            <summary>Build Adjacency index buffer for clothing tessellation</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DECAL_SIZE">
            <summary>Added DecalSize member, solved backward compatibility</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_KEEP_ONLY_PACKAGE_NAMES_IN_STRING_ASSET_REFERENCES_MAP">
            <summary>Keep only package names in StringAssetReferencesMap</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_COOKED_ASSETS_IN_EDITOR_SUPPORT">
            <summary>Support sound cue not saving out editor only data</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_DIALOGUE_WAVE_NAMESPACE_AND_CONTEXT_CHANGES">
            <summary>Updated dialogue wave localization gathering logic.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_MAKE_ROT_RENAME_AND_REORDER">
            <summary>Renamed MakeRot MakeRotator and rearranged parameters.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_K2NODE_VAR_REFERENCEGUIDS">
            <summary>K2Node_Variable will properly have the VariableReference Guid set if available</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SOUND_CONCURRENCY_PACKAGE">
            <summary>Added support for sound concurrency settings structure and overrides</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_USERWIDGET_DEFAULT_FOCUSABLE_FALSE">
            <summary>Changing the default value for focusable user widgets to false</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_BLUEPRINT_CUSTOM_EVENT_CONST_INPUT">
            <summary>Custom event nodes implicitly set 'const' on array and non-array pass-by-reference input params</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_USE_LOW_PASS_FILTER_FREQ">
            <summary>Renamed HighFrequencyGain to LowPassFilterFrequency</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_NO_ANIM_BP_CLASS_IN_GAMEPLAY_CODE">
            <summary>UAnimBlueprintGeneratedClass can be replaced by a dynamic class. Use TSubclassOf UAnimInstance instead.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SCS_STORES_ALLNODES_ARRAY">
            <summary>The SCS keeps a list of all nodes in its hierarchy rather than recursively building it each time it is requested</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FBX_IMPORT_DATA_RANGE_ENCAPSULATION">
            <summary>Moved StartRange and EndRange in UFbxAnimSequenceImportData to use FInt32Interval</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CAMERA_COMPONENT_ATTACH_TO_ROOT">
            <summary>Adding a new root scene component to camera component</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_INSTANCED_STEREO_UNIFORM_UPDATE">
            <summary>Updating custom material expression nodes for instanced stereo implementation</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STREAMABLE_TEXTURE_MIN_MAX_DISTANCE">
            <summary>Texture streaming min and max distance to handle HLOD</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_INJECT_BLUEPRINT_STRUCT_PIN_CONVERSION_NODES">
            <summary>Fixing up invalid struct-to-struct pin connections by injecting available conversion nodes</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_INNER_ARRAY_TAG_INFO">
            <summary>Saving tag data for Array Property's inner property</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_SLOT_NAME_DUPLICATION">
            <summary>Fixed duplicating slot node names in skeleton due to skeleton preload on compile</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_STREAMABLE_TEXTURE_AABB">
            <summary>Texture streaming using AABBs instead of Spheres</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PROPERTY_GUID_IN_PROPERTY_TAG">
            <summary>FPropertyTag stores GUID of property</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_NAME_HASHES_SERIALIZED">
            <summary>Name table hashes are calculated and saved out rather than at load time</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_INSTANCED_STEREO_UNIFORM_REFACTOR">
            <summary>Updating custom material expression nodes for instanced stereo implementation refactor</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_COMPRESSED_SHADER_RESOURCES">
            <summary>Added compression to the shader resource for memory savings</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PRELOAD_DEPENDENCIES_IN_COOKED_EXPORTS">
            <summary>Cooked files contain the dependency graph for the event driven loader (the serialization is largely independent of the use of the new loader)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_TemplateIndex_IN_COOKED_EXPORTS">
            <summary>Cooked files contain the TemplateIndex used by the event driven loader (the serialization is largely independent of the use of the new loader, i.e. this will be null if cooking for the old loader)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_PROPERTY_TAG_SET_MAP_SUPPORT">
            <summary>FPropertyTag includes contained type(s) for Set and Map properties</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_SEARCHABLE_NAMES">
            <summary>Added SearchableNames to the package summary and asset registry</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_64BIT_EXPORTMAP_SERIALSIZES">
            <summary>Increased size of SerialSize and SerialOffset in export map entries to 64 bit, allow support for bigger files</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKYLIGHT_MOBILE_IRRADIANCE_MAP">
            <summary>Sky light stores IrradianceMap for mobile renderer.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_SWEEP_WHILE_WALKING_FLAG">
            <summary>Added flag to control sweep behavior while walking in UCharacterMovementComponent.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_SOFT_OBJECT_PATH">
            <summary>StringAssetReference changed to SoftObjectPath and swapped to serialize as a name+string instead of a string</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_POINTLIGHT_SOURCE_ORIENTATION">
            <summary>Changed the source orientation of point lights to match spot lights (z axis)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_PACKAGE_SUMMARY_LOCALIZATION_ID">
            <summary>LocalizationId has been added to the package summary (editor-only)</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_FIX_WIDE_STRING_CRC">
            <summary>Fixed case insensitive hashes of wide strings containing character values from 128-255</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ADDED_PACKAGE_OWNER">
            <summary>Added package owner to allow private references</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_SKINWEIGHT_PROFILE_DATA_LAYOUT_CHANGES">
            <summary>Changed the data layout for skin weight profile data</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_NON_OUTER_PACKAGE_IMPORT">
            <summary>Added import that can have package different than their outer</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_ASSETREGISTRY_DEPENDENCYFLAGS">
            <summary>Added DependencyFlags to AssetRegistry</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_CORRECT_LICENSEE_FLAG">
            <summary>Fixed corrupt licensee flag in 4.26 assets</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_AUTOMATIC_VERSION">
            <summary>The newest specified version of the Unreal Engine.</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_0">
            <summary>4.0</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_1">
            <summary>4.1</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_2">
            <summary>4.2</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_3">
            <summary>4.3</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_4">
            <summary>4.4</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_5">
            <summary>4.5</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_6">
            <summary>4.6</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_7">
            <summary>4.7</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_8">
            <summary>4.8</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_9">
            <summary>4.9</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_10">
            <summary>4.10</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_11">
            <summary>4.11</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_12">
            <summary>4.12</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_13">
            <summary>4.13</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_14">
            <summary>4.14</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_15">
            <summary>4.15</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_16">
            <summary>4.16</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_17">
            <summary>4.17</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_18">
            <summary>4.18</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_19">
            <summary>4.19</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_20">
            <summary>4.20</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_21">
            <summary>4.21</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_22">
            <summary>4.22</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_23">
            <summary>4.23</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_24">
            <summary>4.24</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_25">
            <summary>4.25</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_26">
            <summary>4.26</summary>
        </member>
        <member name="F:UAssetAPI.UE4Version.VER_UE4_27">
            <summary>4.27</summary>
        </member>
    </members>
</doc>
